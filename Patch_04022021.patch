Index: source/com/greenlight/rta10/executionpoints/impl/RTA10COUPAAPIGEEImpl.java
===================================================================
--- source/com/greenlight/rta10/executionpoints/impl/RTA10COUPAAPIGEEImpl.java	(revision 10635)
+++ source/com/greenlight/rta10/executionpoints/impl/RTA10COUPAAPIGEEImpl.java	(revision 10636)
@@ -5,6 +5,7 @@
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.lang.reflect.Type;
 import java.rmi.RemoteException;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -13,15 +14,23 @@
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Calendar;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Set;
 
+import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections.MapUtils;
 import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringUtils;
 
+import com.google.gson.Gson;
+import com.google.gson.reflect.TypeToken;
 import com.greenlight.rta.automation.wrappers.RequestDetailsFilter;
 import com.greenlight.rta.automation.wrappers.RequestFilter;
 import com.greenlight.rta10.executionpoints.common.RTA10APIConstants;
@@ -105,6 +114,8 @@
 import com.greenlight.xplatformadapter.executionpoints.wrappers.QueryExecutionResult;
 import com.greenlight.xplatformadapter.logs.RTADSLogger;
 import com.greenlight.xplatformadapter.logs.RTADSLoggerFactory;
+import com.greenlight.xplatformadapter.ui.forms.ColumnAcceptedValue;
+import com.greenlight.xplatformadapter.ui.forms.FileColumnMappingForm;
 import com.greenlight.xplatformadapter.utils.XAppConstants;
 import com.greenlight.xplatformadapter.utils.XAppListener;
 import com.greenlight.xplatformadapter.utils.XAppUtils;
@@ -527,6 +538,15 @@
 							return retVal;
 						}
 						List auditLogDataList = new ArrayList();
+						List columnValuesApprovedList = new ArrayList<>();
+						try {
+							String jsonString = XAppUtils.getApplicationProperty(XAppConstants.SFTP_FILE_COLUMN_DATA_FILTER_MAPPING);
+							columnValuesApprovedList=getColumnValuesApprovedListByConvertinJSON(jsonString);
+						}catch (java.lang.Exception e) {
+							_logger.debug(e);
+						}
+						_logger.debug("JSON object available =="+columnValuesApprovedList);
+						
 						for (Iterator it = fileNames.entrySet().iterator(); it.hasNext();) {
 							List logs = new ArrayList();
 							String filterBy = null, fullnameFormat = null;
@@ -540,6 +560,9 @@
 											fileName.indexOf(XAppConstants.UNDERSCORE,
 													fileName.indexOf(XAppConstants.UNDERSCORE) + 1)) : fileName;
 							_logger.debug("fileName::" + fileName);
+							
+							FileColumnMappingForm relevantFileMappingObject = 
+									getRelevantFileMappingObject(fileName, columnValuesApprovedList);
 	
 							// Here to start Data Retrieving
 							_logger.debug("Start::retrieveData::fileNames::" + fileNames);
@@ -580,6 +603,8 @@
 									genFileParser.open(xlsxFile);
 									String[] nextLine;
 									List headerRow = new ArrayList();
+									List columnCount = new ArrayList();
+									Map<Integer,List<String>> columnNumbersToVerifiedForFiltering=new HashMap<Integer,List<String>>();
 									while (true) {
 										List dataRow = null;
 										int counter = genFileParser.getRowCounter();
@@ -587,18 +612,25 @@
 											headerRow = genFileParser.read(counter);
 											if (headerRow == null)
 												break;
+											columnNumbersToVerifiedForFiltering =
+													getColumnNumberToVerifiedForFiltering(headerRow, relevantFileMappingObject);
 										} else {
 											_logger.debug("Inside RTA10APIGEEImpl datarow reader...");
 											dataRow = genFileParser.read(counter);
 											if (dataRow == null)
 												break;
 										}
-										if (dataRow != null && dataRow.size() > 0 && headerRow != null
-												&& headerRow.size() > 0) {
-											AuditLogData logData = new AuditLogData();
-											String clobData = XAppUtils.buildCsv(headerRow, dataRow, progParamNames);
-											logData.setClobData(clobData);
-											logs.add(logData);
+										if (CollectionUtils.isNotEmpty(dataRow) && 
+												CollectionUtils.isNotEmpty(headerRow)) {
+											//IF WHETHER TO ALLOW OR NOT
+											boolean accept  = shouldTheRowBeApplicableForInsertion(
+													columnNumbersToVerifiedForFiltering, dataRow);
+											if(accept) {
+												AuditLogData logData = new AuditLogData();
+												String clobData = XAppUtils.buildCsv(headerRow, dataRow, progParamNames);
+												logData.setClobData(clobData);
+												logs.add(logData);
+											}
 										}
 									}
 									if (!XAppUtils.isEmptyOrNull(logs)) {
@@ -934,4 +966,65 @@
 		}
 		return fileNames;
 	}
+	
+	private List getColumnValuesApprovedListByConvertinJSON(String jsonString) throws Exception {
+		if (StringUtils.isNotBlank(jsonString)) {
+			Gson g = new Gson();
+			Type userListType = new TypeToken<ArrayList<FileColumnMappingForm>>() {
+			}.getType();
+			return g.fromJson(jsonString, userListType);
+		}
+		return Collections.emptyList();
+	}
+
+	private FileColumnMappingForm getRelevantFileMappingObject(String fileName,
+			List<FileColumnMappingForm> fileMappings) {
+
+		for (Iterator<FileColumnMappingForm> iterator = fileMappings.iterator(); iterator.hasNext();) {
+			FileColumnMappingForm fileColumnMappingForm = iterator.next();
+			if (fileName.contains(fileColumnMappingForm.getFileName())) {
+				return fileColumnMappingForm;
+			}
+		}
+		return null;
+	}
+	
+	private Map<Integer, List<String>> getColumnNumberToVerifiedForFiltering(List headrow,
+			FileColumnMappingForm columnMappingForm) {
+		Map<Integer, List<String>> columnNumberToBeVerifired = new HashMap();
+		if (columnMappingForm != null) {
+			List<ColumnAcceptedValue> columnAcceptedValues = columnMappingForm.getColumnAcceptedValues();
+			for (Iterator<ColumnAcceptedValue> iterator = columnAcceptedValues.iterator(); iterator.hasNext();) {
+				ColumnAcceptedValue columnAcceptedValue = iterator.next();
+				if (StringUtils.isNotBlank(columnAcceptedValue.getColumnName())) {
+					for (int i = 0; i < headrow.size(); i++) {
+						if (((String) headrow.get(i)).equalsIgnoreCase(columnAcceptedValue.getColumnName())) {
+							columnNumberToBeVerifired.put(i, columnAcceptedValue.getAcceptedValues());
+							break;
+						}
+					}
+				}
+			}
+		}
+		return columnNumberToBeVerifired;
+	}
+	
+	/**
+	 * Here we check whether the row is applicable for insertion
+	 * 
+	 * */
+	private boolean shouldTheRowBeApplicableForInsertion(Map<Integer, List<String>> columnNumbersToVerifiedForFiltering,
+			List dataRow) {
+		boolean accept = true;
+		if (MapUtils.isNotEmpty(columnNumbersToVerifiedForFiltering)) {
+			for (Map.Entry<Integer, List<String>> pair : columnNumbersToVerifiedForFiltering.entrySet()) {
+				Integer indexValue = pair.getKey();
+				List<String> valuesToBeAccepted = columnNumbersToVerifiedForFiltering.get(indexValue);
+				if (valuesToBeAccepted != null) {
+					accept = accept && (valuesToBeAccepted.contains(dataRow.get(indexValue)));
+				}
+			}
+		}
+		return accept;
+	}
 }
Index: source/com/greenlight/xplatformadapter/utils/XAppConstants.java
===================================================================
--- source/com/greenlight/xplatformadapter/utils/XAppConstants.java	(revision 10635)
+++ source/com/greenlight/xplatformadapter/utils/XAppConstants.java	(revision 10636)
@@ -1105,4 +1105,7 @@
 	public static final String USER_DEBUG_LOG="USER_DEBUG_LOG";
 	
 	public static final String SYSTEM_PARAM_USERNAME_FILTER_FOR_SEGREGATION_OF_LOGS = "sys.param.username.comparision.field";
+
+	public static final String SFTP_FILE_COLUMN_DATA_FILTER_MAPPING="sftp.file.column.data.filter.mapping";
+
 }
Index: source/com/greenlight/xplatformadapter/ui/forms/ColumnAcceptedValue.java
===================================================================
--- source/com/greenlight/xplatformadapter/ui/forms/ColumnAcceptedValue.java	(nonexistent)
+++ source/com/greenlight/xplatformadapter/ui/forms/ColumnAcceptedValue.java	(revision 10636)
@@ -0,0 +1,29 @@
+package com.greenlight.xplatformadapter.ui.forms;
+
+import java.io.Serializable;
+import java.util.List;
+
+public class ColumnAcceptedValue implements Serializable{
+
+	private static final long serialVersionUID = -2481543355409870697L;
+	private String columnName;
+	private List<String> acceptedValues;
+	
+	public String getColumnName() {
+		return columnName;
+	}
+	public void setColumnName(String columnName) {
+		this.columnName = columnName;
+	}
+	public List<String> getAcceptedValues() {
+		return acceptedValues;
+	}
+	public void setAcceptedValues(List<String> acceptedValues) {
+		this.acceptedValues = acceptedValues;
+	}
+	@Override
+	public String toString() {
+		return "ColumnAcceptedValue [columnName=" + columnName + ", acceptedValues=" + acceptedValues + "]";
+	}
+	
+}

Property changes on: source/com/greenlight/xplatformadapter/ui/forms/ColumnAcceptedValue.java
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: source/com/greenlight/xplatformadapter/ui/forms/FileColumnMappingForm.java
===================================================================
--- source/com/greenlight/xplatformadapter/ui/forms/FileColumnMappingForm.java	(nonexistent)
+++ source/com/greenlight/xplatformadapter/ui/forms/FileColumnMappingForm.java	(revision 10636)
@@ -0,0 +1,29 @@
+package com.greenlight.xplatformadapter.ui.forms;
+
+import java.io.Serializable;
+import java.util.List;
+
+public class FileColumnMappingForm implements Serializable {
+	
+	private static final long serialVersionUID = 2392705661065108374L;
+	private String fileName;
+	private List<ColumnAcceptedValue> columnAcceptedValues;
+	
+	public String getFileName() {
+		return fileName;
+	}
+	public void setFileName(String fileName) {
+		this.fileName = fileName;
+	}
+	public List<ColumnAcceptedValue> getColumnAcceptedValues() {
+		return columnAcceptedValues;
+	}
+	public void setColumnAcceptedValues(List<ColumnAcceptedValue> columnAcceptedValues) {
+		this.columnAcceptedValues = columnAcceptedValues;
+	}
+	@Override
+	public String toString() {
+		return "FileColumnMappingForm [fileName=" + fileName + ", columnAcceptedValues=" + columnAcceptedValues + "]";
+	}
+	
+}

Property changes on: source/com/greenlight/xplatformadapter/ui/forms/FileColumnMappingForm.java
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: source/rtads_application.properties
===================================================================
--- source/rtads_application.properties	(revision 10635)
+++ source/rtads_application.properties	(revision 10636)
@@ -851,3 +851,7 @@
 
 
 sys.param.username.comparision.field=USER_ID_DERIVED
+
+#Data column mapping User activity logs in the file
+sftp.file.column.data.filter.mapping=[{"fileName":"revision_records","columnAcceptedValues":[{"columnName":"Document Type","acceptedValues":["InvoiceHeader","InvoiceHeader1"]},{"columnName":"Document Id","acceptedValues":["1852"]}]}]
+
