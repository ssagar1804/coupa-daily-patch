Index: source/config/appNavigationConfig.xml
===================================================================
--- source/config/appNavigationConfig.xml	(revision 7417)
+++ source/config/appNavigationConfig.xml	(revision 7418)
@@ -810,6 +810,10 @@
 			<RETURN_PAGE ID="SUCCESS" PAGE="/successPage.jsp" />	 			 
 			<RETURN_PAGE ID="ERROR" PAGE="/errorPage.jsp" />	 
 		</NAVIGATION>
+		<NAVIGATION  SCREEN_ID="RESQ_USERACTVT_REPORT_5"  ACTION_ID="processUARprtGeneration.do"  ACTION_CLASS="com.greenlight.rqAdapter.ui.actions.resqActions.UserActvtTmplRptAction">
+			<RETURN_PAGE ID="SUCCESS" PAGE="/successPage.jsp" />	 			 
+			<RETURN_PAGE ID="ERROR" PAGE="/errorPage.jsp" />	 
+		</NAVIGATION>
 		<NAVIGATION  SCREEN_ID="RESQ_USERACTVT_REPORT_REVIEW1"  ACTION_ID="showReviewWindow.do"  ACTION_CLASS="com.greenlight.rqAdapter.ui.actions.resqActions.UserActvtTmplRptAction">
 			<RETURN_PAGE ID="showReviewWindow" PAGE="/jsp/resqJsp/saveReview.jsp" />			
 			<RETURN_PAGE ID="SUCCESS" PAGE="/successPage.jsp" />	 			 
@@ -853,6 +857,11 @@
 			<RETURN_PAGE ID="SUCCESS" PAGE="/successPage.jsp" />	 			 
 			<RETURN_PAGE ID="ERROR" PAGE="/errorPage.jsp" />	 
 		</NAVIGATION>
+		<NAVIGATION  SCREEN_ID="RESQ_USERACTVT_REPORT_FILE_NAME" ACTION_ID="showUserActvityReportDetails.do"  ACTION_CLASS="com.greenlight.rqAdapter.ui.actions.resqActions.UserActvtTmplRptAction">
+			<RETURN_PAGE ID="showUserActvityReportDetailsWindow" PAGE="/jsp/resqJsp/saveUserActvityReportDetails.jsp" />			
+			<RETURN_PAGE ID="SUCCESS" PAGE="/successPage.jsp" />	 			 
+			<RETURN_PAGE ID="ERROR" PAGE="/errorPage.jsp" />	 
+		</NAVIGATION>
 		<NAVIGATION  SCREEN_ID="RESQ_ADVAUDIT_REPORT_REVIEW1"  ACTION_ID="showAdvAuditReviewWindow.do"  ACTION_CLASS="com.greenlight.rqAdapter.ui.actions.resqActions.UserActvtTmplRptAction">
 			<RETURN_PAGE ID="showReviewWindow" PAGE="/jsp/resqJsp/saveReview.jsp" />		
 			<RETURN_PAGE ID="SUCCESS" PAGE="/successPage.jsp" />	 			 
@@ -1787,4 +1796,24 @@
 		<RETURN_PAGE ID="SUCCESS" PAGE="/successPage.jsp" />                        
 		<RETURN_PAGE ID="ERROR" PAGE="/errorPage.jsp" />       
     </NAVIGATION>
+    <NAVIGATION  SCREEN_ID="DOWNLOAD_1"  ACTION_ID="searchDownloads.do"  ACTION_CLASS="com.greenlight.rqAdapter.ui.actions.resqActions.RDownloadsAction">
+		<RETURN_PAGE ID="searchDownloads" PAGE="/jsp/resqJsp/RDownloads.jsp" />
+		<RETURN_PAGE ID="SUCCESS" PAGE="/successPage.jsp" />	 			 
+		<RETURN_PAGE ID="ERROR" PAGE="/errorPage.jsp" />	 
+	</NAVIGATION>
+	<NAVIGATION  SCREEN_ID="DOWNLOAD_2"  ACTION_ID="deleteDownloads.do"  ACTION_CLASS="com.greenlight.rqAdapter.ui.actions.resqActions.RDownloadsAction">
+		<RETURN_PAGE ID="searchDownloads" PAGE="/jsp/resqJsp/RDownloads.jsp" />
+		<RETURN_PAGE ID="SUCCESS" PAGE="/successPage.jsp" />	 			 
+		<RETURN_PAGE ID="ERROR" PAGE="/errorPage.jsp" />	 
+	</NAVIGATION>
+	<NAVIGATION  SCREEN_ID="DOWNLOAD_3"  ACTION_ID="validateFileName.do"  ACTION_CLASS="com.greenlight.rqAdapter.ui.actions.resqActions.RDownloadsAction">
+		<RETURN_PAGE ID="SUCCESS" PAGE="/successPage.jsp" />	 			 
+		<RETURN_PAGE ID="ERROR" PAGE="/errorPage.jsp" />	 
+	</NAVIGATION>
+	<NAVIGATION  SCREEN_ID="DOWNLOAD_4"  ACTION_ID="downloadFromDownloadsScreen.do"  ACTION_CLASS="com.greenlight.rqAdapter.ui.actions.resqActions.RDownloadsAction">
+		<RETURN_PAGE ID="SUCCESS" PAGE="/successPage.jsp" />	 			 
+		<RETURN_PAGE ID="ERROR" PAGE="/errorPage.jsp" />	 
+	</NAVIGATION>
+	
+	
 </xAppNavigation>
\ No newline at end of file
Index: source/config/actions.xml
===================================================================
--- source/config/actions.xml	(revision 7417)
+++ source/config/actions.xml	(revision 7418)
@@ -1309,4 +1309,19 @@
 		<DESCRIPTION LOCALE="en" VALUE="Permission for ResqConfiReqRegAccessEam" />
 		<PERMISSION CLASS="com.greenlight.rqAdapter.framework.actionpermissions.ResQNamePermission" NAME="ResqConfiReqRegAccessEam" />
 	</ACTION>
+	
+	<ACTION NAME="ResqDownloadsModuleTab" >
+		<DESCRIPTION LOCALE="en" VALUE="Permission to see the download link" />
+		<PERMISSION CLASS="com.greenlight.rqAdapter.framework.actionpermissions.ResQNamePermission" NAME="ResqDownloadsModuleTab" />
+	</ACTION>
+	<ACTION NAME="ResqDownloadsModuleDownloadBtn" >
+		<DESCRIPTION LOCALE="en" VALUE="Permission for capability to download the file which are generated in background" />
+		<PERMISSION CLASS="com.greenlight.rqAdapter.framework.actionpermissions.ResQNamePermission" NAME="ResqDownloadsModuleDownloadBtn" />
+	</ACTION>
+	<ACTION NAME="ResqDownloadsModuleDeleteBtn" >
+		<DESCRIPTION LOCALE="en" VALUE="Permission for capability to delete the file which are downloaded" />
+		<PERMISSION CLASS="com.greenlight.rqAdapter.framework.actionpermissions.ResQNamePermission" NAME="ResqDownloadsModuleDeleteBtn" />
+	</ACTION>
+	
+	
 </BUSINESSSERVICE>
Index: source/com/greenlight/rqAdapter/ui/forms/resqForms/UserActvtTmplRptForm.java
===================================================================
--- source/com/greenlight/rqAdapter/ui/forms/resqForms/UserActvtTmplRptForm.java	(revision 7417)
+++ source/com/greenlight/rqAdapter/ui/forms/resqForms/UserActvtTmplRptForm.java	(revision 7418)
@@ -13,8 +13,8 @@
 
 import org.apache.log4j.Logger;
 import com.greenlight.rqAdapter.dao.GenericDbMessages;
+import com.greenlight.rqAdapter.dao.resqDAO.RDownloadsDAO;
 import com.greenlight.rqAdapter.dao.resqDAO.UserActvtTmplRptDAO;
-import com.greenlight.rqAdapter.dto.resqDTO.UserActvtyRptDTO;
 import com.greenlight.rqAdapter.framework.messagebundle.I18nUtil;
 import com.greenlight.rqAdapter.framework.security.User;
 
@@ -140,6 +140,7 @@
 	private String fetchReportFrom="";
 	
 	private Map userDefFiltersDependent = new TreeMap();
+	private String allowDownloadThroughLegacyProcess;
 	
 	public String getRoleName() {
 		return roleName;
@@ -185,10 +186,11 @@
 //					
 //			}
 //			this.setSelectedLogIds(selectedIdString);
-			if(this.pageList.size()>=XAppConstants.BATCH_UPDATE_SIZE){
+			Integer uaShowimit = RDownloadsDAO.getUAShowLimit(this.rqSystemId);
+			if(this.pageList.size()>=uaShowimit){
 				GenericDbMessages genericDbMessages = new GenericDbMessages();
 				genericDbMessages.setOperationMessage(I18nUtil.getString(locale, "RESQ.RECORDSIZE.ERROR.1") + 
-						 							   " "+XAppConstants.BATCH_UPDATE_SIZE+ " "+ 
+						 							   " "+uaShowimit+ " "+ 
 														I18nUtil.getString(locale, "RESQ.RECORDSIZE.ERROR.2"));
 				genericDbMessages.setOperationStatus(GenericDbMessages.OPERATION_STATUS_ERROR);
 				this.setGenericDbMessages(genericDbMessages);
@@ -233,7 +235,8 @@
 					this.startDate, this.endDate, this.rqSystemId,this.statusList,this.userType,this.getUserDefFilterData(), 
 					sortByColumn, sortBy, loggedInUser,this.isOldValNewValDataPresent,showSensitiveData,"",this.selectedLogIds,this.requestId,this.reasonCd,this.getFetchClobData(),this.getAgeOfActivity(), fetchReportFrom);
 			
-			if(this.pageList.size()>=XAppConstants.BATCH_UPDATE_SIZE){
+			Integer uaShowimit = RDownloadsDAO.getUAShowLimit(rqSystemId);
+			if(this.pageList.size()>=uaShowimit){
 				GenericDbMessages genericDbMessages = new GenericDbMessages();
 				genericDbMessages.setOperationMessage(I18nUtil.getString(locale, "RESQ.RECORDSIZE.ERROR.1") + 
 						 							   " "+XAppConstants.BATCH_UPDATE_SIZE+ " "+ 
@@ -241,8 +244,6 @@
 				genericDbMessages.setOperationStatus(GenericDbMessages.OPERATION_STATUS_ERROR);
 				this.setGenericDbMessages(genericDbMessages);
 			}
-			
-				
 			this.setPagination(XAppConstants.PAGINATION_INITILIZE, "", -1) ;
 			
 		} catch (Exception e) {
@@ -1173,4 +1174,15 @@
 	public void setStatusList(List statusList) {
 		this.statusList = statusList;
 	}
+
+	public String getAllowDownloadThroughLegacyProcess() {
+		return allowDownloadThroughLegacyProcess;
+	}
+
+	public void setAllowDownloadThroughLegacyProcess(String allowDownloadThroughLegacyProcess) {
+		this.allowDownloadThroughLegacyProcess = allowDownloadThroughLegacyProcess;
+	}
+	
+	
+	
 }
\ No newline at end of file
Index: source/com/greenlight/rqAdapter/ui/forms/resqForms/RDownloadsForm.java
===================================================================
--- source/com/greenlight/rqAdapter/ui/forms/resqForms/RDownloadsForm.java	(nonexistent)
+++ source/com/greenlight/rqAdapter/ui/forms/resqForms/RDownloadsForm.java	(revision 7418)
@@ -0,0 +1,132 @@
+package com.greenlight.rqAdapter.ui.forms.resqForms;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.log4j.Logger;
+
+import com.greenlight.rqAdapter.dao.GenericDbMessages;
+import com.greenlight.rqAdapter.dao.resqDAO.RDownloadsDAO;
+import com.greenlight.rqAdapter.dao.tables.resqTables.TableRQDownloads;
+import com.greenlight.rqAdapter.framework.security.User;
+import com.greenlight.rqAdapter.logs.Log;
+import com.greenlight.rqAdapter.ui.forms.PaginationForm;
+import com.greenlight.rqAdapter.utils.XAppConstants;
+
+public class RDownloadsForm {
+
+	public static final Logger LOGGER = Log.getCustomLogger();
+	GenericDbMessages genericDbMessages;
+	private PaginationForm paginationForm = new PaginationForm();
+	private String sortByColumn = "";
+	private String sortBy = "";
+	private List<TableRQDownloads> displayList = new ArrayList<TableRQDownloads>();
+	private User loggedUser = new User();
+	List<TableRQDownloads> importList = new ArrayList<TableRQDownloads>();
+	private String selectedIds[];
+	private String selectAllChkBox = "";
+
+	public void initilize(String sortByColumn, String sortBy, User loggedUser) {
+
+		try {
+			this.sortByColumn = sortByColumn;
+			this.sortBy = sortBy;
+			this.loggedUser = loggedUser;
+			this.importList = RDownloadsDAO.getDownloadedList(this.sortByColumn, this.sortBy,this.loggedUser);
+			this.setPagination(XAppConstants.PAGINATION_INITILIZE, -1);
+
+		} catch (Exception e) {
+			LOGGER.error("RUserActivityReportDetailsForm :: initilize :: error :: " + e.getMessage());
+			LOGGER.error("RUserActivityReportDetailsForm :: initilize :: error :: " + e.getStackTrace());
+		}
+
+	}
+
+	public void setPagination(String operation, int pageNumber) {
+
+		if (this.paginationForm == null)
+			this.paginationForm = new PaginationForm();
+
+		this.displayList = this.paginationForm.getPageDisplayList(this.importList, operation, pageNumber);
+
+		LOGGER.info("Program - Pagination info for Program Search[advance=" + operation + ", firstPage="
+				+ this.paginationForm.isFirstPage() + ", prevPage=" + this.paginationForm.isPrevPage() + ", nextPage="
+				+ this.paginationForm.isNextPage() + ", lastPage=" + this.paginationForm.isLastPage() + ", totalPages="
+				+ this.paginationForm.getTotalPages() + ", currentPage=" + this.paginationForm.getCurrentPage()
+				+ ", totalListSize=" + this.paginationForm.getTotalListSize() + ", displayResourceParameters="
+				+ (this.displayList != null ? this.displayList.size() : -1) + "]");
+	}
+
+	public GenericDbMessages getGenericDbMessages() {
+		return genericDbMessages;
+	}
+
+	public void setGenericDbMessages(GenericDbMessages genericDbMessages) {
+		this.genericDbMessages = genericDbMessages;
+	}
+
+	public PaginationForm getPaginationForm() {
+		return paginationForm;
+	}
+
+	public void setPaginationForm(PaginationForm paginationForm) {
+		this.paginationForm = paginationForm;
+	}
+
+	public String getSortByColumn() {
+		return sortByColumn;
+	}
+
+	public void setSortByColumn(String sortByColumn) {
+		this.sortByColumn = sortByColumn;
+	}
+
+	public String getSortBy() {
+		return sortBy;
+	}
+
+	public void setSortBy(String sortBy) {
+		this.sortBy = sortBy;
+	}
+
+	public List<TableRQDownloads> getDisplayList() {
+		return displayList;
+	}
+
+	public void setDisplayList(List<TableRQDownloads> displayList) {
+		this.displayList = displayList;
+	}
+
+	public User getLoggedUser() {
+		return loggedUser;
+	}
+
+	public void setLoggedUser(User loggedUser) {
+		this.loggedUser = loggedUser;
+	}
+
+	public List<TableRQDownloads> getImportList() {
+		return importList;
+	}
+
+	public void setImportList(List<TableRQDownloads> importList) {
+		this.importList = importList;
+	}
+
+	public String[] getSelectedIds() {
+		return selectedIds;
+	}
+
+	public void setSelectedIds(String[] selectedIds) {
+		this.selectedIds = selectedIds;
+	}
+
+	public String getSelectAllChkBox() {
+		return selectAllChkBox;
+	}
+
+	public void setSelectAllChkBox(String selectAllChkBox) {
+		this.selectAllChkBox = selectAllChkBox;
+	}
+
+}

Property changes on: source\com\greenlight\rqAdapter\ui\forms\resqForms\RDownloadsForm.java
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: source/com/greenlight/rqAdapter/ui/actions/resqActions/UserActvtTmplRptAction.java
===================================================================
--- source/com/greenlight/rqAdapter/ui/actions/resqActions/UserActvtTmplRptAction.java	(revision 7417)
+++ source/com/greenlight/rqAdapter/ui/actions/resqActions/UserActvtTmplRptAction.java	(revision 7418)
@@ -23,10 +23,14 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.commons.io.IOUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.log4j.Logger;
 
 import com.google.gson.Gson;
 import com.greenlight.rqAdapter.dao.GenericDbMessages;
+import com.greenlight.rqAdapter.dao.SystemDAO;
+import com.greenlight.rqAdapter.dao.connection.XAppConnection;
+import com.greenlight.rqAdapter.dao.connection.XAppDBConnectionManager;
 import com.greenlight.rqAdapter.dao.resqDAO.UserActvtTmplRptDAO;
 import com.greenlight.rqAdapter.exceptions.XAppActionException;
 import com.greenlight.rqAdapter.framework.actionpermissions.ResQNamePermission;
@@ -133,6 +137,14 @@
 				userActvtTmplRptForm.setUserDefFilters(new TreeMap());//reset
 				userActvtTmplRptForm.setUserDefFilterData(new TreeMap());//reset
 				
+				String allowDownloadThroughLegacyApproach = 
+						SystemDAO.getSystemParamValue(XAppConstants.ALLOW_DOWNLOAD_THROUGH_LEGACY_PROCESS, 
+								loggedUser.getSystemId());
+				userActvtTmplRptForm.setAllowDownloadThroughLegacyProcess("Y");
+				if(StringUtils.isNotBlank(allowDownloadThroughLegacyApproach)) {
+					userActvtTmplRptForm.setAllowDownloadThroughLegacyProcess(allowDownloadThroughLegacyApproach);
+				}
+				
 				//to show reasoncode or ffidcomments 
 				boolean isResonCodeDisply=XAppUtils.isPropertyDisplayForSystem(XAppConstants.SHOW_REASONCODE_IN_SYSTEM,loggedUser.getSystemId());
 				if(isResonCodeDisply){
@@ -513,7 +525,56 @@
 				request.setAttribute("fileName", absfilePath);
 				return actionDetails.getReturnPage("showProcessingProgess") ;
 		
-			}else if( actionDetails.getActionId().trim().equalsIgnoreCase("downloadTmplAss2.do"))
+			} else if ("processUARprtGeneration.do".equalsIgnoreCase(actionDetails.getActionId().trim())) {
+				UserActvtTmplRptForm userActvtTmplRptForm = (UserActvtTmplRptForm) request.getSession()
+						.getAttribute("UserActvtTmplRptForm");
+				userActvtTmplRptForm = (userActvtTmplRptForm == null ? new UserActvtTmplRptForm()
+						: userActvtTmplRptForm);
+				userActvtTmplRptForm.setTempName(
+						(request.getParameter("tempName") == null ? "" : request.getParameter("tempName").trim()));
+				userActvtTmplRptForm.setRoleName(
+						(request.getParameter("roleName") == null ? "" : request.getParameter("roleName").trim()));
+				userActvtTmplRptForm.setResqUser(
+						(request.getParameter("resqUser") == null ? "" : request.getParameter("resqUser").trim()));
+				userActvtTmplRptForm.setResqOwner(
+						(request.getParameter("resqOwner") == null ? "" : request.getParameter("resqOwner").trim()));
+				userActvtTmplRptForm.setStartDate(
+						(request.getParameter("startDate") == null ? "" : request.getParameter("startDate").trim()));
+				userActvtTmplRptForm.setEndDate(
+						(request.getParameter("endDate") == null ? "" : request.getParameter("endDate").trim()));
+				String fetchClob = request.getParameter("fetchClobData") == null ? ""
+						: request.getParameter("fetchClobData").trim();
+				userActvtTmplRptForm.setLoggedUser(loggedUser);
+				userActvtTmplRptForm.setRqSystemId(loggedUser.getSystemId());
+				userActvtTmplRptForm.setFetchReportFrom(
+						(request.getParameter("fetchReportFrom") == null ? XAppConstants.FETCH_REPORT_DATA_CURRENT
+								: request.getParameter("fetchReportFrom").trim()));
+				_logger.debug("Inside UserActvtTmplRptAction processUARprtGeneration.do fetchReportFrom###:"
+						+ request.getParameter("fetchReportFrom"));
+				request.getSession().setAttribute("UserActvtTmplRptForm", userActvtTmplRptForm);
+
+				String dirPath = XAppListener.CROSS_APP_HOME + File.separator + XAppConstants.DOCS_FOLDER
+						+ File.separator;
+
+				String fileNameEntered = 
+						request.getParameter("fileNameEntered") == null ? "" : request.getParameter("fileNameEntered").trim();
+				
+				fileNameEntered = fileNameEntered+".xls";
+				String absfilePath = dirPath + fileNameEntered;
+				_logger.debug("absfilePath::" + absfilePath);
+				String fileNameWithUnderscore = absfilePath + "_";
+				File actualfile = new File(fileNameWithUnderscore);
+				OutputStream out = new FileOutputStream(actualfile);
+
+				UserActivityReportBackgroundPrepartionThread uaDownloadThread = new UserActivityReportBackgroundPrepartionThread(out, userActvtTmplRptForm,
+						showSensitiveData, fetchClob, locale, fileNameWithUnderscore,fileNameEntered);
+				Thread downloadThread = new Thread(uaDownloadThread);
+				downloadThread.start();
+				request.setAttribute("fileName", absfilePath);
+
+				return null;
+			}			
+			else if( actionDetails.getActionId().trim().equalsIgnoreCase("downloadTmplAss2.do"))
 			{
 				String absfilePath=request.getParameter("fileName");
 				File file = new File(absfilePath);
@@ -636,7 +697,11 @@
 					return actionDetails.getReturnPage("saveReviewRedirect") ;
 				}
 				
-			}else if( actionDetails.getActionId().trim().equalsIgnoreCase("showDetails.do"))
+			}
+			else if( actionDetails.getActionId().trim().equalsIgnoreCase("showUserActvityReportDetails.do")){
+				return actionDetails.getReturnPage("showUserActvityReportDetailsWindow") ;
+			}
+			else if( actionDetails.getActionId().trim().equalsIgnoreCase("showDetails.do"))
 			{
 				UserActvtTmplRptForm userActvtTmplRptForm=(UserActvtTmplRptForm) request.getSession().getAttribute("UserActvtTmplRptForm") ;
 				userActvtTmplRptForm = ( userActvtTmplRptForm == null ? new UserActvtTmplRptForm() : userActvtTmplRptForm ) ;
@@ -649,8 +714,11 @@
 					userActTableName="GLT_RQ_USER_ACTVTY";
 				}
 				_logger.debug("Inside showDetails.do fetchReportFrom:"+fetchReportFrom + " userActTableName:"+userActTableName);
-				List dataList = UserActvtTmplRptDAO.getActvtyClobList(userActvtTmplRptForm.getLogId(),locale,userActvtTmplRptForm.isOldValNewValDataPresent(),showSensitiveData, userActTableName, false);
+				XAppConnection xAppConnection = XAppDBConnectionManager.getInstance().getConnection();
+				List dataList = UserActvtTmplRptDAO.getActvtyClobList(userActvtTmplRptForm.getLogId(),locale,userActvtTmplRptForm.isOldValNewValDataPresent(),showSensitiveData, userActTableName, false,xAppConnection);
 				request.setAttribute("dataList", dataList);
+				XAppUtils.closeOpenCursors(xAppConnection, null,null);
+				
 				request.getSession().setAttribute("UserActvtTmplRptForm1",userActvtTmplRptForm);
 				return actionDetails.getReturnPage("showDetails") ;
 			}else if( actionDetails.getActionId().trim().equalsIgnoreCase("showEscalateWindow.do"))
Index: source/com/greenlight/rqAdapter/ui/actions/resqActions/UserActivityReportBackgroundPrepartionThread.java
===================================================================
--- source/com/greenlight/rqAdapter/ui/actions/resqActions/UserActivityReportBackgroundPrepartionThread.java	(nonexistent)
+++ source/com/greenlight/rqAdapter/ui/actions/resqActions/UserActivityReportBackgroundPrepartionThread.java	(revision 7418)
@@ -0,0 +1,61 @@
+package com.greenlight.rqAdapter.ui.actions.resqActions;
+
+import java.io.OutputStream;
+import java.util.Date;
+import java.util.List;
+import java.util.Locale;
+
+import org.apache.log4j.Logger;
+
+import com.greenlight.rqAdapter.dao.resqDAO.UserActvtTmplRptDAO;
+import com.greenlight.rqAdapter.logs.Log;
+import com.greenlight.rqAdapter.ui.forms.resqForms.UserActvtTmplRptForm;
+import com.greenlight.rqAdapter.utils.XAppUtils;
+
+public class UserActivityReportBackgroundPrepartionThread implements Runnable {
+
+	private static final Logger LOGGER = Log.getCustomLogger();
+	private OutputStream os;
+	private UserActvtTmplRptForm userActvtTmplRptForm;
+	private boolean showSensitiveData;
+	private String fetchClob;
+	private Locale locale;
+	private String absfilePath;
+	private String fileNameEntered;
+	
+	UserActivityReportBackgroundPrepartionThread(OutputStream os, UserActvtTmplRptForm userActvtTmplRptForm,
+			boolean showSensitiveData, String fetchClob, Locale locale, String absfilePath,String fileNameEntered) {
+		this.os = os;
+		this.userActvtTmplRptForm = userActvtTmplRptForm;
+		this.showSensitiveData = showSensitiveData;
+		this.fetchClob = fetchClob;
+		this.locale = locale;
+		this.absfilePath = absfilePath;
+		this.fileNameEntered=fileNameEntered;
+	}
+
+	@Override
+	public void run() {
+
+		LOGGER.debug("UserActivityReportBackgroundPrepartionThread run method started");
+		List list = UserActvtTmplRptDAO.getReportData(XAppUtils.getNullableString(userActvtTmplRptForm.getTempName()),
+				XAppUtils.getNullableString(userActvtTmplRptForm.getResqUser()),
+				XAppUtils.getNullableString(userActvtTmplRptForm.getResqOwner()),
+				XAppUtils.getNullableString(userActvtTmplRptForm.getRoleName()), userActvtTmplRptForm.getStartDate(),
+				userActvtTmplRptForm.getEndDate(), userActvtTmplRptForm.getRqSystemId(),
+				userActvtTmplRptForm.getStatusList(), userActvtTmplRptForm.getUserType(),
+				userActvtTmplRptForm.getUserDefFilterData(), userActvtTmplRptForm.getSortByColumn(),
+				userActvtTmplRptForm.getSortBy(), userActvtTmplRptForm.getLoggedUser(),
+				userActvtTmplRptForm.isOldValNewValDataPresent(), showSensitiveData, "",
+				userActvtTmplRptForm.getSelectedLogIds(), userActvtTmplRptForm.getRequestId(),
+				userActvtTmplRptForm.getReasonCd(), fetchClob, userActvtTmplRptForm.getAgeOfActivity(),
+				userActvtTmplRptForm.getFetchReportFrom());
+		Date st = new Date();
+		UserActvtTmplRptDAO.generateXLSDownloadReportAndStoreInTheGivenPath(list, userActvtTmplRptForm.getUserDefColHeadings(),
+				userActvtTmplRptForm.getUserDefCols(), userActvtTmplRptForm.getRqSystemId(), locale, os,
+				userActvtTmplRptForm.isOldValNewValDataPresent(), userActvtTmplRptForm, showSensitiveData, absfilePath,fileNameEntered);
+		LOGGER.debug("UserActivityReportBackgroundPrepartionThread run method finished.Start Time:" + st + ",End Time:"
+				+ new Date());
+
+	}
+}

Property changes on: source\com\greenlight\rqAdapter\ui\actions\resqActions\UserActivityReportBackgroundPrepartionThread.java
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: source/com/greenlight/rqAdapter/ui/actions/resqActions/RDownloadsAction.java
===================================================================
--- source/com/greenlight/rqAdapter/ui/actions/resqActions/RDownloadsAction.java	(nonexistent)
+++ source/com/greenlight/rqAdapter/ui/actions/resqActions/RDownloadsAction.java	(revision 7418)
@@ -0,0 +1,103 @@
+package com.greenlight.rqAdapter.ui.actions.resqActions;
+
+import java.io.File;
+import java.io.FileInputStream;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.commons.io.IOUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.log4j.Logger;
+
+import com.greenlight.rqAdapter.dao.resqDAO.RDownloadsDAO;
+import com.greenlight.rqAdapter.exceptions.XAppActionException;
+import com.greenlight.rqAdapter.framework.actions.XAppAction;
+import com.greenlight.rqAdapter.framework.actions.XAppActionDetails;
+import com.greenlight.rqAdapter.framework.security.User;
+import com.greenlight.rqAdapter.logs.Log;
+import com.greenlight.rqAdapter.ui.forms.resqForms.RDownloadsForm;
+import com.greenlight.rqAdapter.utils.XAppUtils;
+
+public class RDownloadsAction implements XAppAction {
+
+	private static final Logger LOGGER = Log.getCustomLogger();
+
+	public RDownloadsAction() {
+		super();
+	}
+
+	public String execute(HttpServletRequest request, HttpServletResponse response, XAppActionDetails actionDetails)
+			throws XAppActionException {
+		String returnPage = "/errorPage.jsp";
+		User loggedUser = (User) request.getSession().getAttribute("CURRENT_USER");
+
+		try {
+
+			LOGGER.info("RDownloadsAction[operation=" + actionDetails.getActionId() + "]");
+			String trimmedActionName = actionDetails.getActionId().trim();
+			if ("searchDownloads.do".equalsIgnoreCase(trimmedActionName)) {
+				RDownloadsForm rDownloadsForm = (RDownloadsForm) request.getSession().getAttribute("RDownloadsForm");
+				rDownloadsForm = (rDownloadsForm == null ? new RDownloadsForm() : rDownloadsForm);
+				// sorting information
+				String sortByColumn = request.getParameter("sortByColumn");
+				sortByColumn = (sortByColumn == null ? "DETAIL_ID" : sortByColumn);
+				String sortBy = request.getParameter("sortBy");
+				sortBy = (sortBy == null ? "DESC" : sortBy);
+
+				String operation = request.getParameter("operation");
+				LOGGER.info("SystemAction[getsystem operation=" + operation + "]");
+
+				operation = (operation == null ? "SEARCH" : operation);
+
+				try {
+					LOGGER.info(rDownloadsForm.getPaginationForm().getCurrentPage() + ", operation=" + operation);
+
+					if (operation.trim().equals("SEARCH")) {
+						rDownloadsForm.initilize(sortByColumn, sortBy, loggedUser);
+					} else if (operation.trim().equals("ADVANCE")) {
+						String advanceOperation = request.getParameter("advanceOperation");
+						rDownloadsForm.setPagination(advanceOperation, -1);
+					} else if (operation.trim().equals("ADVANCEPAGE")) {
+						String advanceOperation = request.getParameter("advanceOperation");
+						int pageNumber = Integer.parseInt(advanceOperation.trim());
+						rDownloadsForm.setPagination("ADVANCEPAGE", pageNumber);
+					}
+				} catch (Exception e) {
+					LOGGER.error("RDownloadsAction :: execute :: searchDownloads :: error :: " + e.getStackTrace());
+				}
+				request.getSession().setAttribute("RDownloadsForm", rDownloadsForm);
+				return actionDetails.getReturnPage("searchDownloads");
+			} else if ("deleteDownloads.do".equalsIgnoreCase(trimmedActionName)) {
+				String checkedIdStr = request.getParameter("checkedIds");
+				RDownloadsDAO.deleteDownloads(checkedIdStr);
+				return actionDetails.getReturnPage("searchDownloads");
+			} else if ("downloadFromDownloadsScreen.do".equalsIgnoreCase(trimmedActionName)) {
+
+				String checkedIdStr = request.getParameter("checkedIds");
+				String absfilePath = RDownloadsDAO.compressAndGetTheFileNameToDownload(checkedIdStr);
+				FileInputStream fis = null;
+
+				if (StringUtils.isNoneBlank(absfilePath)) {
+					File file = new File(absfilePath);
+					LOGGER.debug("copy file to client::" + file.getName());
+					response.setContentType("application/zip");
+					response.setHeader("Content-Disposition", "attachment; filename=" + file.getName());
+					fis = new FileInputStream(absfilePath);
+					IOUtils.copy(fis, response.getOutputStream());
+
+					IOUtils.closeQuietly(fis);
+					IOUtils.closeQuietly(response.getOutputStream());
+					XAppUtils.deleteFilesRecursively(file);
+					LOGGER.debug("delete file from server::" + absfilePath);
+				}
+
+				return null;
+			}
+		} catch (Exception e) {
+			LOGGER.error("RDownloadsAction :: execute ::  error :: ", e);
+		}
+		return returnPage;
+	} // end of method execute
+
+} // end of class

Property changes on: source\com\greenlight\rqAdapter\ui\actions\resqActions\RDownloadsAction.java
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: source/com/greenlight/rqAdapter/ui/actions/resqActions/UserActivityDownloadThread.java
===================================================================
--- source/com/greenlight/rqAdapter/ui/actions/resqActions/UserActivityDownloadThread.java	(revision 7417)
+++ source/com/greenlight/rqAdapter/ui/actions/resqActions/UserActivityDownloadThread.java	(revision 7418)
@@ -39,10 +39,10 @@
 				XAppUtils.getNullableString(userActvtTmplRptForm.getRoleName()),
 				userActvtTmplRptForm.getStartDate(), userActvtTmplRptForm.getEndDate(), userActvtTmplRptForm.getRqSystemId(),userActvtTmplRptForm.getStatusList(),userActvtTmplRptForm.getUserType(),userActvtTmplRptForm.getUserDefFilterData(), 
 				userActvtTmplRptForm.getSortByColumn(), userActvtTmplRptForm.getSortBy(), userActvtTmplRptForm.getLoggedUser(),userActvtTmplRptForm.isOldValNewValDataPresent(),showSensitiveData,"",userActvtTmplRptForm.getSelectedLogIds(),userActvtTmplRptForm.getRequestId(),userActvtTmplRptForm.getReasonCd(),fetchClob,userActvtTmplRptForm.getAgeOfActivity(),userActvtTmplRptForm.getFetchReportFrom());
-		Date st=Calendar.getInstance().getTime();
+		Date st=new Date();
 		UserActvtTmplRptDAO.getXLSDownloadReport(list, userActvtTmplRptForm.getUserDefColHeadings(), userActvtTmplRptForm.getUserDefCols(), userActvtTmplRptForm.getRqSystemId(),
 				locale, os,userActvtTmplRptForm.isOldValNewValDataPresent(),userActvtTmplRptForm,showSensitiveData,absfilePath);
-		_logger.debug("downloadThread run method finished.Start Time:"+st+",End Time:"+Calendar.getInstance().getTime());
+		_logger.debug("downloadThread run method finished.Start Time:"+st+",End Time:"+new Date());
 	}
 
 }
Index: source/com/greenlight/rqAdapter/adapter/extraction/GenericResqAdapter.java
===================================================================
--- source/com/greenlight/rqAdapter/adapter/extraction/GenericResqAdapter.java	(revision 7417)
+++ source/com/greenlight/rqAdapter/adapter/extraction/GenericResqAdapter.java	(revision 7418)
@@ -38,6 +38,7 @@
 import java.util.Locale;
 import java.util.Map;
 
+import org.apache.commons.lang3.StringUtils;
 import org.apache.log4j.Logger;
 import org.openspml.client.SpmlClient;
 import org.openspml.message.BatchRequest;
@@ -470,6 +471,9 @@
 			if(!XAppUtils.isBlankOrNull(reportHeaderData)) {
 				String[] lines = reportHeaderData.split(XAppConstants.NEWLINE);
 				String[] arr = lines[1].split(XAppConstants.COMMA);
+				if(StringUtils.isBlank(arr[0]) && lines.length>2) {
+					arr = lines[2].split(XAppConstants.COMMA);
+				}
 				for (int i = 0; i < arr.length; i++) {
 					String[] temp = arr[i].split(XAppConstants.AMPH);
 					for (int j = 0; j < temp.length; j=j+1) {
Index: source/com/greenlight/rqAdapter/framework/actionpermissions/ResQApplicationPermission.java
===================================================================
--- source/com/greenlight/rqAdapter/framework/actionpermissions/ResQApplicationPermission.java	(revision 7417)
+++ source/com/greenlight/rqAdapter/framework/actionpermissions/ResQApplicationPermission.java	(revision 7418)
@@ -369,7 +369,11 @@
 													
 													ResQNamePermission.RESQ_CONFI_REQ_PRI_ACCESS_EAM,
 													ResQNamePermission.RESQ_CONFI_REQ_REG_ACCESS_EAM,
-													ResQNamePermission.RESQ_TAB_ACCESS_REQUESTS
+													ResQNamePermission.RESQ_TAB_ACCESS_REQUESTS,
+													
+													ResQNamePermission.RESQ_DOWNLOADS_MODULE_TAB,
+													ResQNamePermission.RESQ_DOWNLOADS_MODULE_DOWNLOAD_BTN,
+													ResQNamePermission.RESQ_DOWNLOADS_MODULE_DELETE_BTN
 		}));}};
 	
 	
Index: source/com/greenlight/rqAdapter/framework/actionpermissions/ResQNamePermission.java
===================================================================
--- source/com/greenlight/rqAdapter/framework/actionpermissions/ResQNamePermission.java	(revision 7417)
+++ source/com/greenlight/rqAdapter/framework/actionpermissions/ResQNamePermission.java	(revision 7418)
@@ -327,6 +327,13 @@
 	
 	public static final String RESQ_CONFI_REQ_PRI_ACCESS_EAM = "ResqConfiReqPriAccessEam";
 	public static final String RESQ_CONFI_REQ_REG_ACCESS_EAM = "ResqConfiReqRegAccessEam";
+	
+	//Added for VES160 -Background download process
+	public static final String RESQ_DOWNLOADS_MODULE_TAB = "ResqDownloadsModuleTab";
+	public static final String RESQ_DOWNLOADS_MODULE_DOWNLOAD_BTN = "ResqDownloadsModuleDownloadBtn";
+	public static final String RESQ_DOWNLOADS_MODULE_DELETE_BTN = "ResqDownloadsModuleDeleteBtn";
+	
+	
 	/**
 	 * @param arg0
 	 */
Index: source/com/greenlight/rqAdapter/dao/resqDAO/UserActvtTmplRptDAO.java
===================================================================
--- source/com/greenlight/rqAdapter/dao/resqDAO/UserActvtTmplRptDAO.java	(revision 7417)
+++ source/com/greenlight/rqAdapter/dao/resqDAO/UserActvtTmplRptDAO.java	(revision 7418)
@@ -60,11 +60,9 @@
 import com.greenlight.rqAdapter.ui.forms.resqForms.UserActvtTmplRptForm;
 import com.greenlight.rqAdapter.utils.AutoBatchInput;
 import com.greenlight.rqAdapter.utils.EncriptionToDecription;
-import com.greenlight.rqAdapter.utils.RTADSIntegrationUtility;
 import com.greenlight.rqAdapter.utils.XAppConstants;
 import com.greenlight.rqAdapter.utils.XAppListener;
 import com.greenlight.rqAdapter.utils.XAppUtils;
-import com.greenlight.service.authmgmt.MapClass;
 import com.greenlight.rqAdapter.utils.ZipUtils;
 /**
  * @author Mamta Sharma
@@ -1049,7 +1047,8 @@
 		String _userDef_14 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_14);
 		String _userDef_15 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_15);
 		//getting details of regular user
-		while((rs != null && rs.next()) && list.size()< XAppConstants.BATCH_UPDATE_SIZE)
+		Integer uaShowimit = RDownloadsDAO.getUAShowLimit(systemId);
+		while((rs != null && rs.next()) && list.size()< uaShowimit)
 		{			
 			if(CommonMethodsDAO.getAddToListFlag(_tempName,tempName,rs.getString("TMPL_NAME"))
 					&& CommonMethodsDAO.getAddToListFlag(_roleName,roleName,rs.getString("ROLE_NAME"))
@@ -1249,7 +1248,7 @@
 		}
 		return list;
 	}
-	
+
 	public static int calculateAgeOfActivity(String status, Date creationDate, Date statusLastUpdateDate){
 		int age = 0;
 		java.util.Date dateAfter = new java.util.Date();
@@ -1311,6 +1310,7 @@
 		ResultSet rs= (ResultSet)data.get(0);
 		PreparedStatement statement= (PreparedStatement)data.get(1);
 		XAppConnection xAppConnection= (XAppConnection)data.get(2);
+		XAppConnection xAppConnectionForClobData= null;
 		WorkbookSettings ws = null;
 		WritableWorkbook workbook = null;
 		try {
@@ -1398,28 +1398,12 @@
 				createXLSDataForUserDetailsHeader(systemId, s4, locale);
 				
 				int row=1;
+				xAppConnectionForClobData = XAppDBConnectionManager.getInstance().getConnection();
 				while((rs != null && rs.next())  && row<= XAppConstants.BATCH_UPDATE_SIZE)
 				{
-		    	  if(CommonMethodsDAO.getAddToListFlag(_tempName,userActvtTmplRptForm.getTempName(),rs.getString("TMPL_NAME"))
-							&& CommonMethodsDAO.getAddToListFlag(_roleName,userActvtTmplRptForm.getRoleName(),rs.getString("ROLE_NAME"))
-							&& CommonMethodsDAO.getAddToListFlag(_resqUser,userActvtTmplRptForm.getResqUser(),rs.getString("RESQ_USERID"))
-							&& CommonMethodsDAO.getAddToListFlag(_resqOwnr,userActvtTmplRptForm.getResqOwner(),rs.getString("RESQ_OWNER"))
-							&& CommonMethodsDAO.getAddToListFlag(_requestId,userActvtTmplRptForm.getRequestId(),rs.getString("REQUEST_ID"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_01,USER_DEF_01,rs.getString("USER_DEF_01"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_02,USER_DEF_02,rs.getString("USER_DEF_02"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_03,USER_DEF_03,rs.getString("USER_DEF_03"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_04,USER_DEF_04,rs.getString("USER_DEF_04"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_05,USER_DEF_05,rs.getString("USER_DEF_05"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_06,USER_DEF_06,rs.getString("USER_DEF_06"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_07,USER_DEF_07,rs.getString("USER_DEF_07"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_08,USER_DEF_08,rs.getString("USER_DEF_08"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_09,USER_DEF_09,rs.getString("USER_DEF_09"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_10,USER_DEF_10,rs.getString("USER_DEF_10"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_11,USER_DEF_11,rs.getString("USER_DEF_11"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_12,USER_DEF_12,rs.getString("USER_DEF_12"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_13,USER_DEF_13,rs.getString("USER_DEF_13"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_14,USER_DEF_14,rs.getString("USER_DEF_14"))
-							&& CommonMethodsDAO.getAddToListFlag(_userDef_15,USER_DEF_15,rs.getString("USER_DEF_15"))) {
+					if (isAllUserDefConditionSatisfied(userActvtTmplRptForm, rs, USER_DEF_01, USER_DEF_02, USER_DEF_03,
+							USER_DEF_04, USER_DEF_05, USER_DEF_06, USER_DEF_07, USER_DEF_08, USER_DEF_09, USER_DEF_10,
+							USER_DEF_11, USER_DEF_12, USER_DEF_13, USER_DEF_14, USER_DEF_15)) {
 						if(XAppConstants.ALL.equals(userActvtTmplRptForm.getUserType()) || rs.getString("USER_TYPE").equals(userActvtTmplRptForm.getUserType())){
 							//do nothing
 						}else{
@@ -1439,24 +1423,9 @@
 						}
 						List statusList=userActvtTmplRptForm.getStatusList();
 						if(((statusList != null && !statusList.contains("-1") && statusList.contains(rs.getString("STATUS")==null?"":rs.getString("STATUS"))) ||(statusList == null || statusList.contains("-1"))) && ageFilter){
-							ArrayList userDefValues = new ArrayList();
-							userDefValues.add(rs.getString("USER_DEF_01"));
-							userDefValues.add(rs.getString("USER_DEF_02"));
-							userDefValues.add(rs.getString("USER_DEF_03"));
-							userDefValues.add(rs.getString("USER_DEF_04"));
-							userDefValues.add(rs.getString("USER_DEF_05"));
-							userDefValues.add(rs.getString("USER_DEF_06"));
-							userDefValues.add(rs.getString("USER_DEF_07"));
-							userDefValues.add(rs.getString("USER_DEF_08"));
-							userDefValues.add(rs.getString("USER_DEF_09"));
-							userDefValues.add(rs.getString("USER_DEF_10"));
-							userDefValues.add(rs.getString("USER_DEF_11"));
-							userDefValues.add(rs.getString("USER_DEF_12"));
-							userDefValues.add(rs.getString("USER_DEF_13"));
-							userDefValues.add(rs.getString("USER_DEF_14"));
-							userDefValues.add(rs.getString("USER_DEF_15"));
-							
-							createXLSDataForUserActvty(systemId, rs, heading, values, s1, locale, isOldValNewValDataPresent,row,userActvtTmplRptForm,showSensitiveData,userDefValues,systemName,isIdBasedSystem,showReasonCode,showFFIDComment,hideReviewComments,hideDetails,true);
+							ArrayList<String> userDefValues = new ArrayList<String>();
+							setUserDefValues(rs, userDefValues);
+							createXLSDataForUserActvty(systemId, rs, heading, values, s1, locale, isOldValNewValDataPresent,row,userActvtTmplRptForm,showSensitiveData,userDefValues,systemName,isIdBasedSystem,showReasonCode,showFFIDComment,hideReviewComments,hideDetails,true,xAppConnectionForClobData);
 							createXLSDataForTmplActivation(systemId, rs,s2, locale,row,userDefValues);
 							createXLSDataForRoleDetails(systemId, rs,s3, locale,row,userDefValues);
 							createXLSDataForUserDetails(systemId, rs,s4, locale,row,userDefValues);
@@ -1504,9 +1473,28 @@
 				_logger.debug("file renamed:"+renamed);
 			}
 			XAppUtils.closeOpenCursors(xAppConnection, statement, rs);
+			XAppUtils.closeOpenCursors(xAppConnectionForClobData, null, null);
 		}
 		_logger.info("UserActvtTmplRptDAO:: Finished getXLSDownloadReport");
 	}
+
+	private static void setUserDefValues(ResultSet rs, ArrayList<String> userDefValues) throws SQLException {
+		userDefValues.add(rs.getString("USER_DEF_01"));
+		userDefValues.add(rs.getString("USER_DEF_02"));
+		userDefValues.add(rs.getString("USER_DEF_03"));
+		userDefValues.add(rs.getString("USER_DEF_04"));
+		userDefValues.add(rs.getString("USER_DEF_05"));
+		userDefValues.add(rs.getString("USER_DEF_06"));
+		userDefValues.add(rs.getString("USER_DEF_07"));
+		userDefValues.add(rs.getString("USER_DEF_08"));
+		userDefValues.add(rs.getString("USER_DEF_09"));
+		userDefValues.add(rs.getString("USER_DEF_10"));
+		userDefValues.add(rs.getString("USER_DEF_11"));
+		userDefValues.add(rs.getString("USER_DEF_12"));
+		userDefValues.add(rs.getString("USER_DEF_13"));
+		userDefValues.add(rs.getString("USER_DEF_14"));
+		userDefValues.add(rs.getString("USER_DEF_15"));
+	}
 	
 	public static void createXLSDataForUserActvtyHeader(Integer SystemId, List heading, List value, WritableSheet s1, java.util.Locale locale,boolean isOldValNewValDataPresent,boolean isIdBasedSystem,boolean showReasonCode,boolean showFFIDComment,boolean hideReviewComments,boolean hideDetails)
 				throws WriteException{
@@ -1578,7 +1566,7 @@
 		_logger.info("UserActvtTmplRptDAO:: Finished createXLSDataForUserActvtyHeader");
 }
 	
-	public static void createXLSDataForUserActvty(Integer SystemId, ResultSet rs, List heading, List value, WritableSheet s1, java.util.Locale locale,boolean isOldValNewValDataPresent,int row,UserActvtTmplRptForm userActvtTmplRptForm,boolean showSensitiveData,List userDefValues,String systemName,boolean isIdBasedSystem,boolean showReasonCode,boolean showFFIDComment,boolean hideReviewComments,boolean hideDetails,boolean truncateClob)
+	public static void createXLSDataForUserActvty(Integer SystemId, ResultSet rs, List heading, List value, WritableSheet s1, java.util.Locale locale,boolean isOldValNewValDataPresent,int row,UserActvtTmplRptForm userActvtTmplRptForm,boolean showSensitiveData,List userDefValues,String systemName,boolean isIdBasedSystem,boolean showReasonCode,boolean showFFIDComment,boolean hideReviewComments,boolean hideDetails,boolean truncateClob,XAppConnection xAppConnection)
 				throws WriteException, SQLException{
 		_logger.info("UserActvtTmplRptDAO:: Start createXLSDataForUserActvty");
 		/* Format the Font */
@@ -1679,7 +1667,7 @@
 				StringBuilder oldValue = new StringBuilder();
 				StringBuilder newValue = new StringBuilder();
 				StringBuilder header = new StringBuilder();
-				List actvtyClobList  = UserActvtTmplRptDAO.getActvtyClobList(new Integer(rs.getInt("RQ_LOG_ID")),null,isOldValNewValDataPresent, showSensitiveData ,userActTableName, truncateClob);
+				List actvtyClobList  = UserActvtTmplRptDAO.getActvtyClobList(new Integer(rs.getInt("RQ_LOG_ID")),null,isOldValNewValDataPresent, showSensitiveData ,userActTableName, truncateClob,xAppConnection);
 				if(actvtyClobList != null && !actvtyClobList.isEmpty()){
 					for(int i=1;i<actvtyClobList.size();i++){
 						List rows = (List)actvtyClobList.get(i);
@@ -2078,7 +2066,7 @@
 		return list;
 	} //end of method getUserDefColList
 	
-	public static List getActvtyClobList(Integer logId, Locale locale, boolean isOldValNewValDataPresent, boolean showSensitiveData, String actCmtTableName,boolean truncateClob)
+	public static List getActvtyClobList(Integer logId, Locale locale, boolean isOldValNewValDataPresent, boolean showSensitiveData, String actCmtTableName,boolean truncateClob,XAppConnection xAppConnection)
 	{
 		StringBuilder header = new StringBuilder(I18nUtil.getString(locale, "RESQ.ADVANCED.AUDIT.REPORT.HEADER"));
 		StringBuilder value = new StringBuilder(I18nUtil.getString(locale, "RESQ.ADVANCED.AUDIT.REPORT.VALUE"));
@@ -2095,14 +2083,14 @@
 			headers.add(newValue);
 		}
 		list.add(headers);
-		XAppConnection xAppConnection = null;
+	//	XAppConnection xAppConnection = null;
 		PreparedStatement statement=null;
 		ResultSet rs=null;
 		String selectSql="";
 		try {
 			Map oldMap = new HashMap();
 			Map newMap = new HashMap();
-			xAppConnection = XAppDBConnectionManager.getInstance().getConnection();
+	//		xAppConnection = XAppDBConnectionManager.getInstance().getConnection();
 			xAppConnection.setAutoCommit(false);
             selectSql=GenericDbDao.getSelectSql(actCmtTableName, false, null);
 			statement=xAppConnection.prepareStatement(selectSql);
@@ -2220,7 +2208,8 @@
 		} catch (Exception e) {
 			_logger.debug(e);
 		} finally {
-			XAppUtils.closeOpenCursors(xAppConnection, statement, rs);
+		   //Commented because we need not open and close connection in loop
+		   XAppUtils.closeOpenCursors(null, statement, rs);
 		}
 		_logger.info("UserActvtTmplRptDAO :: List size getActvtyClobList :: "+list.size());
 		return list;
@@ -3455,6 +3444,254 @@
 		}
 		return dependentList;
 	}
+/////////Changes related to VES 160 Background download
+	
+	public static void generateXLSDownloadReportAndStoreInTheGivenPath(List data, List heading, List values,
+			Integer systemId, Locale locale, OutputStream os, boolean isOldValNewValDataPresent,
+			UserActvtTmplRptForm userActvtTmplRptForm, boolean showSensitiveData, String absfilePath,
+			String fileNameEntered) {
+		_logger.info("UserActvtTmplRptDAO:: Start of  generateXLSDownloadReportAndStoreInTheGivenPath");
+		ResultSet rs = (ResultSet) data.get(0);
+		PreparedStatement statement = (PreparedStatement) data.get(1);
+		XAppConnection xAppConnection = (XAppConnection) data.get(2);
+		XAppConnection xAppConnection1 = null;
+		WorkbookSettings ws = null;
+		WritableWorkbook workbook = null;
+		Integer groupedSheetNumber = 1;
+		Integer detailId = null;
+		Double fileSize = Double.valueOf(0.0);
+		String zipFileName = "";
+		try {
+
+			detailId = RDownloadsDAO.addNewEntryForUserActivityDownloadedFile(systemId, fileNameEntered,
+					Double.valueOf(0.0), XAppConstants.FILE_GENERATION_IN_PROGRESS,
+					userActvtTmplRptForm.getLoggedUser().getRqUserId(), null);
+			if (detailId != null) {
+				fileNameEntered = 
+						fileNameEntered.replace(XAppConstants.EXT_XLS, XAppConstants.UNDERSCORE + detailId+XAppConstants.EXT_XLS);
+				RDownloadsDAO.updateEntryForUserActivityDownloadedFile(detailId,
+						XAppConstants.FILE_GENERATION_IN_PROGRESS, fileSize, data,
+						fileNameEntered + XAppConstants.UNDERSCORE + detailId, zipFileName);
+
+				ws = new WorkbookSettings();
+				ws.setLocale(locale);
+				workbook = Workbook.createWorkbook(os, ws);
+
+				String systemName = SystemDAO.getSystemNameFromId(systemId);
+				boolean isIdBasedSystem = XAppUtils.isIdBasedApproach(systemId);
+				boolean showReasonCode = XAppUtils.isPropertyDisplayForSystem(XAppConstants.SHOW_REASONCODE_IN_SYSTEM,
+						systemId);
+				boolean showFFIDComment = XAppUtils.isPropertyDisplayForSystem(XAppConstants.SHOW_COMMENTS_IN_SYSTEM,
+						systemId);
+				boolean hideReviewComments = Boolean.parseBoolean(
+						SystemDAO.getSystemParamValue(XAppConstants.SYS_PARAM_HIDE_REVIEW_COMMENTS, systemId));
+				boolean hideDetails = Boolean
+						.parseBoolean(SystemDAO.getSystemParamValue(XAppConstants.SYS_PARAM_HIDE_CLOB, systemId));
+
+				String USER_DEF_01 = "", USER_DEF_02 = "", USER_DEF_03 = "", USER_DEF_04 = "", USER_DEF_05 = "",
+						USER_DEF_06 = "", USER_DEF_07 = "", USER_DEF_08 = "", USER_DEF_09 = "", USER_DEF_10 = "",
+						USER_DEF_11 = "", USER_DEF_12 = "", USER_DEF_13 = "", USER_DEF_14 = "", USER_DEF_15 = "";
+				Map filterData = userActvtTmplRptForm.getUserDefFilterData();
+				if (userActvtTmplRptForm.getUserDefFilterData() != null && filterData.size() > 0) {
+					Object[] Keys = filterData.keySet().toArray();
+					for (int i = 0; i < Keys.length; i++) {
+						String key = (String) Keys[i];
+						String value = (String) filterData.get((String) Keys[i]);
+						if ("USER_DEF_01".equals(key)) {
+							USER_DEF_01 = value;
+						} else if ("USER_DEF_02".equals(key)) {
+							USER_DEF_02 = value;
+						} else if ("USER_DEF_03".equals(key)) {
+							USER_DEF_03 = value;
+						} else if ("USER_DEF_04".equals(key)) {
+							USER_DEF_04 = value;
+						} else if ("USER_DEF_05".equals(key)) {
+							USER_DEF_05 = value;
+						} else if ("USER_DEF_06".equals(key)) {
+							USER_DEF_06 = value;
+						} else if ("USER_DEF_07".equals(key)) {
+							USER_DEF_07 = value;
+						} else if ("USER_DEF_08".equals(key)) {
+							USER_DEF_08 = value;
+						} else if ("USER_DEF_09".equals(key)) {
+							USER_DEF_09 = value;
+						} else if ("USER_DEF_10".equals(key)) {
+							USER_DEF_10 = value;
+						} else if ("USER_DEF_11".equals(key)) {
+							USER_DEF_11 = value;
+						} else if ("USER_DEF_12".equals(key)) {
+							USER_DEF_12 = value;
+						} else if ("USER_DEF_13".equals(key)) {
+							USER_DEF_13 = value;
+						} else if ("USER_DEF_14".equals(key)) {
+							USER_DEF_14 = value;
+						} else if ("USER_DEF_15".equals(key)) {
+							USER_DEF_15 = value;
+						}
+					}
+				}
+
+				Integer sheetNumber = 0;
+
+				WritableSheet s1 = null;
+				WritableSheet s2 = null;
+				WritableSheet s3 = null;
+				WritableSheet s4 = null;
+				int rowCountInOneSheet = 1;
+				Long totalRowsIterated = Long.valueOf(0);
+				Integer uaDownloadLimit = RDownloadsDAO.getUADownloadLimit(systemId,false);
+				xAppConnection1 = XAppDBConnectionManager.getInstance().getConnection();
+				while ((rs != null && rs.next()) && totalRowsIterated < uaDownloadLimit) {
+
+					if (rowCountInOneSheet >= EXCEL_SHEET_MAX_ROW_LIMIT || rowCountInOneSheet == 1) {
+						s1 = workbook.createSheet(I18nUtil.getString(locale, "RESQ.USER.ACTIVITY") + groupedSheetNumber,
+								sheetNumber++);
+						s2 = workbook.createSheet(
+								I18nUtil.getString(locale, "RESQ.TEMPLATE.ACTIVATION") + groupedSheetNumber,
+								sheetNumber++);
+						s3 = workbook.createSheet(
+								I18nUtil.getString(locale, "RESQ.TEMPLATE.ROLE.DETAILS") + groupedSheetNumber,
+								sheetNumber++);
+						s4 = workbook.createSheet(
+								I18nUtil.getString(locale, "CROSSAPP.USER.DETAILS") + groupedSheetNumber,
+								sheetNumber++);
+						groupedSheetNumber++;
+
+						createXLSDataForUserActvtyHeader(systemId, heading, values, s1, locale,
+								isOldValNewValDataPresent, isIdBasedSystem, showReasonCode, showFFIDComment,
+								hideReviewComments, hideDetails);
+						createXLSDataForTmplActivationHeader(systemId, s2, locale);
+						createXLSDataForRoleDetailsHeader(systemId, s3, locale);
+						createXLSDataForUserDetailsHeader(systemId, s4, locale);
+						rowCountInOneSheet = 1;
+					}
+
+					if (isAllUserDefConditionSatisfied(userActvtTmplRptForm, rs, USER_DEF_01, USER_DEF_02, USER_DEF_03,
+							USER_DEF_04, USER_DEF_05, USER_DEF_06, USER_DEF_07, USER_DEF_08, USER_DEF_09, USER_DEF_10,
+							USER_DEF_11, USER_DEF_12, USER_DEF_13, USER_DEF_14, USER_DEF_15)) {
+						if (XAppConstants.ALL.equals(userActvtTmplRptForm.getUserType())
+								|| rs.getString("USER_TYPE").equals(userActvtTmplRptForm.getUserType())) {
+							// do nothing
+						} else {
+							continue;
+						}
+						boolean ageFilter = false;
+						int age = calculateAgeOfActivity(
+								rs.getString("STATUS") == null ? XAppConstants.BLANK : rs.getString("STATUS"),
+								rs.getDate("CREATION_DATE"), rs.getDate("STAT_UPADATE"));
+						String ageOfActivity = userActvtTmplRptForm.getAgeOfActivity();
+						if (!ageOfActivity.equals("") || ageOfActivity == null) {
+							int ageOfAct = Integer.parseInt(ageOfActivity);
+							if (ageOfAct >= 0 && age >= ageOfAct) {
+								ageFilter = true;
+							}
+						}
+						if (ageOfActivity.equals("") || ageOfActivity == null) {
+							ageFilter = true;
+						}
+						List statusList = userActvtTmplRptForm.getStatusList();
+						if (((statusList != null && !statusList.contains("-1")
+								&& statusList.contains(rs.getString("STATUS") == null ? "" : rs.getString("STATUS")))
+								|| (statusList == null || statusList.contains("-1"))) && ageFilter) {
+							ArrayList<String> userDefValues = new ArrayList<String>();
+							setUserDefValues(rs, userDefValues);
+
+							createXLSDataForUserActvty(systemId, rs, heading, values, s1, locale,
+									isOldValNewValDataPresent, rowCountInOneSheet, userActvtTmplRptForm, showSensitiveData,
+									userDefValues, systemName, isIdBasedSystem, showReasonCode, showFFIDComment,
+									hideReviewComments, hideDetails, true,xAppConnection1);
+							createXLSDataForTmplActivation(systemId, rs, s2, locale, rowCountInOneSheet, userDefValues);
+							createXLSDataForRoleDetails(systemId, rs, s3, locale, rowCountInOneSheet, userDefValues);
+							createXLSDataForUserDetails(systemId, rs, s4, locale, rowCountInOneSheet, userDefValues);
+							rowCountInOneSheet++;
+							totalRowsIterated++;
+						}
+					}
+				}
+			}
+		} catch (Exception e) {
+			_logger.debug("UserActvtTmplRptDAO :: generateXLSDownloadReportAndStoreInTheGivenPath :: error :: ", e);
+			java.util.Date date = new java.util.Date();
+			Object endDateTimeObj = new java.sql.Timestamp(date.getTime());
+			RDownloadsDAO.updateEntryForUserActivityDownloadedFile(detailId, XAppConstants.FILE_GENERATION_FAILED,
+					Double.valueOf(0.0), endDateTimeObj,fileNameEntered, null);
+		} finally {
+			if (workbook != null) {
+				try {
+					workbook.write();
+					workbook.close();
+				} catch (IOException e) {
+					_logger.error("Error while writing workbook:", e);
+				} catch (WriteException e) {
+					_logger.error("Error while closing workbook:", e);
+				}
+			}
+			if (os != null) {
+				try {
+					os.close();
+				} catch (IOException e) {
+					_logger.debug("Error while closing OS:", e);
+				}
+			}
+			RDownloadsDAO.writeDownTheRecordsInAFile(absfilePath, fileNameEntered, detailId, zipFileName);
+			XAppUtils.closeOpenCursors(xAppConnection, statement, rs);
+			XAppUtils.closeOpenCursors(xAppConnection1, null,null);
+		}
+		_logger.info("UserActvtTmplRptDAO:: Finished getXLSDownloadReport");
+	}
+
+	private static boolean isAllUserDefConditionSatisfied(UserActvtTmplRptForm userActvtTmplRptForm, ResultSet rs,
+			String USER_DEF_01, String USER_DEF_02, String USER_DEF_03, String USER_DEF_04, String USER_DEF_05,
+			String USER_DEF_06, String USER_DEF_07, String USER_DEF_08, String USER_DEF_09, String USER_DEF_10,
+			String USER_DEF_11, String USER_DEF_12, String USER_DEF_13, String USER_DEF_14, String USER_DEF_15)
+			throws SQLException {
+
+		String tempName = CommonMethodsDAO.getDescrForCaseInsensitivity(userActvtTmplRptForm.getTempName());
+		String _roleName = CommonMethodsDAO.getDescrForCaseInsensitivity(userActvtTmplRptForm.getRoleName());
+		String _resqUser = CommonMethodsDAO.getDescrForCaseInsensitivity(userActvtTmplRptForm.getResqUser());
+		String _resqOwnr = CommonMethodsDAO.getDescrForCaseInsensitivity(userActvtTmplRptForm.getResqOwner());
+		String _requestId = CommonMethodsDAO.getDescrForCaseInsensitivity(userActvtTmplRptForm.getRequestId());
+		String _userDef_01 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_01);
+		String _userDef_02 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_02);
+		String _userDef_03 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_03);
+		String _userDef_04 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_04);
+		String _userDef_05 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_05);
+		String _userDef_06 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_06);
+		String _userDef_07 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_07);
+		String _userDef_08 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_08);
+		String _userDef_09 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_09);
+		String _userDef_10 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_10);
+		String _userDef_11 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_11);
+		String _userDef_12 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_12);
+		String _userDef_13 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_13);
+		String _userDef_14 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_14);
+		String _userDef_15 = CommonMethodsDAO.getDescrForCaseInsensitivity(USER_DEF_15);
 
+		return CommonMethodsDAO.getAddToListFlag(tempName, userActvtTmplRptForm.getTempName(),
+				rs.getString("TMPL_NAME"))
+				&& CommonMethodsDAO.getAddToListFlag(_roleName, userActvtTmplRptForm.getRoleName(),
+						rs.getString("ROLE_NAME"))
+				&& CommonMethodsDAO.getAddToListFlag(_resqUser, userActvtTmplRptForm.getResqUser(),
+						rs.getString("RESQ_USERID"))
+				&& CommonMethodsDAO.getAddToListFlag(_resqOwnr, userActvtTmplRptForm.getResqOwner(),
+						rs.getString("RESQ_OWNER"))
+				&& CommonMethodsDAO.getAddToListFlag(_requestId, userActvtTmplRptForm.getRequestId(),
+						rs.getString("REQUEST_ID"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_01, USER_DEF_01, rs.getString("USER_DEF_01"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_02, USER_DEF_02, rs.getString("USER_DEF_02"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_03, USER_DEF_03, rs.getString("USER_DEF_03"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_04, USER_DEF_04, rs.getString("USER_DEF_04"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_05, USER_DEF_05, rs.getString("USER_DEF_05"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_06, USER_DEF_06, rs.getString("USER_DEF_06"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_07, USER_DEF_07, rs.getString("USER_DEF_07"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_08, USER_DEF_08, rs.getString("USER_DEF_08"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_09, USER_DEF_09, rs.getString("USER_DEF_09"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_10, USER_DEF_10, rs.getString("USER_DEF_10"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_11, USER_DEF_11, rs.getString("USER_DEF_11"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_12, USER_DEF_12, rs.getString("USER_DEF_12"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_13, USER_DEF_13, rs.getString("USER_DEF_13"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_14, USER_DEF_14, rs.getString("USER_DEF_14"))
+				&& CommonMethodsDAO.getAddToListFlag(_userDef_15, USER_DEF_15, rs.getString("USER_DEF_15"));
+	}
 
 }
\ No newline at end of file
Index: source/com/greenlight/rqAdapter/dao/resqDAO/RDownloadsDAO.java
===================================================================
--- source/com/greenlight/rqAdapter/dao/resqDAO/RDownloadsDAO.java	(nonexistent)
+++ source/com/greenlight/rqAdapter/dao/resqDAO/RDownloadsDAO.java	(revision 7418)
@@ -0,0 +1,404 @@
+package com.greenlight.rqAdapter.dao.resqDAO;
+
+import java.io.File;
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.SQLSyntaxErrorException;
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.commons.lang3.StringUtils;
+import org.apache.log4j.Logger;
+
+import com.greenlight.rqAdapter.dao.GenericDbDao;
+import com.greenlight.rqAdapter.dao.SystemDAO;
+import com.greenlight.rqAdapter.dao.connection.XAppConnection;
+import com.greenlight.rqAdapter.dao.connection.XAppDBConnectionManager;
+import com.greenlight.rqAdapter.dao.tables.resqTables.TableRQDownloads;
+import com.greenlight.rqAdapter.framework.security.User;
+import com.greenlight.rqAdapter.logs.Log;
+import com.greenlight.rqAdapter.utils.DateUtil;
+import com.greenlight.rqAdapter.utils.XAppConstants;
+import com.greenlight.rqAdapter.utils.XAppUtils;
+import com.greenlight.rqAdapter.utils.ZipUtils;
+
+/**
+ * 
+ * @author Sagar Singh
+ *
+ */
+public class RDownloadsDAO implements Serializable {
+
+	private static final long serialVersionUID = -6508995287952409350L;
+	private static final Logger LOGGER = Log.getCustomLogger();
+	private static final String DETAIL_ID = "DETAIL_ID";
+
+	public static List<TableRQDownloads> getDownloadedList(String sortByColumn, String sortBy, User loggedInUser) {
+		List<TableRQDownloads> list = new ArrayList<TableRQDownloads>();
+		XAppConnection xAppConnection = null;
+		PreparedStatement statement = null;
+		ResultSet rs = null;
+		String selectSqlString = "";
+		Integer rqSystemId = loggedInUser.getSystemId();
+		boolean isAdmin = loggedInUser.getRolesList().contains(XAppConstants.ADMIN);
+		try {
+			xAppConnection = XAppDBConnectionManager.getInstance().getConnection();
+			xAppConnection.setAutoCommit(false);
+			selectSqlString = GenericDbDao.getSelectSql("GLT_RQ_DOWNLOADS", false, new ArrayList<String>());
+			// ----sorting
+			String orderBy = "";
+			if (sortByColumn.trim().equals(DETAIL_ID)) {
+				sortByColumn = " DETAIL_ID ";
+			}
+
+			LOGGER.info("RDownloadsDAO :: RDownloadsDAO :: sortByColumn=" + sortByColumn + "]");
+			if (!isAdmin) {
+				selectSqlString += "AND CREATED_BY = ?";
+			}
+
+			if (sortByColumn.trim().length() > 0) {
+				orderBy = " ORDER BY " + sortByColumn + " " + sortBy;
+				selectSqlString += orderBy;
+			}
+			// -------
+			LOGGER.info("RDownloadsDAO :: RDownloadsDAO ::  selectSqlString=" + selectSqlString + "]");
+			statement = xAppConnection.prepareStatement(selectSqlString);
+
+			// --------------------------------------
+			statement.setInt(1, rqSystemId);
+			if (!isAdmin) {
+				statement.setString(2, loggedInUser.getUserId());
+			}
+
+			rs = statement.executeQuery();
+
+			while (rs.next()) {
+				TableRQDownloads tableRQDownloads = new TableRQDownloads();
+
+				tableRQDownloads.setDetailId(rs.getInt(DETAIL_ID));
+				tableRQDownloads.setReportName(rs.getString("REPORT_NAME"));
+				tableRQDownloads.setFileSize(rs.getDouble("FILE_SIZE"));
+				tableRQDownloads.setStatus(rs.getString("STATUS"));
+
+				int userId = rs.getInt("CREATED_BY");
+				tableRQDownloads.setCreatedByInt(userId);
+				tableRQDownloads.setCreatedBy(CommonMethodsDAO.getUserNameToShow(xAppConnection, userId));
+
+				tableRQDownloads.setCreationDateTime((Timestamp) rs.getObject("CREATION_DATE_TIME"));
+				tableRQDownloads.setCreationDateString("");
+				if (tableRQDownloads.getCreationDateTime() != null) {
+					tableRQDownloads.setCreationDateString(DateUtil.getPSFTTimeFormat(
+							tableRQDownloads.getCreationDateTime(), DateUtil.GRESQ_DATE_COMMON_FORMAT));
+				}
+
+				tableRQDownloads.setStartDateTime((Timestamp) rs.getObject("START_DATE_TIME"));
+				tableRQDownloads.setStartDateTimeString("");
+				if (tableRQDownloads.getStartDateTimeString() != null) {
+					tableRQDownloads.setStartDateTimeString(DateUtil
+							.getPSFTTimeFormat(tableRQDownloads.getStartDateTime(), DateUtil.GRESQ_DATE_COMMON_FORMAT));
+				}
+
+				tableRQDownloads.setEndDateTime((Timestamp) rs.getObject("END_DATE_TIME"));
+				tableRQDownloads.setEndDateTimeString("");
+				if (tableRQDownloads.getEndDateTime() != null) {
+					tableRQDownloads.setEndDateTimeString(DateUtil.getPSFTTimeFormat(tableRQDownloads.getEndDateTime(),
+							DateUtil.GRESQ_DATE_COMMON_FORMAT));
+				}
+
+				tableRQDownloads.setRqSystemId(rqSystemId);
+				list.add(tableRQDownloads);
+
+			} // end of while rs next
+
+		} catch (Exception e) {
+			LOGGER.debug("RDownloadsDAO :: getDownloadedList :: error ::" + e.getStackTrace());
+		} finally {
+			XAppUtils.closeOpenCursors(xAppConnection, statement, rs);
+		}
+		return list;
+	}
+
+	public static void deleteDownloads(String detailIdStr) {
+
+		if (detailIdStr != null) {
+			XAppConnection xAppConnection = null;
+			PreparedStatement statement = null;
+			ResultSet rs = null;
+			String selectSqlString = "";
+
+			try {
+				xAppConnection = XAppDBConnectionManager.getInstance().getConnection();
+				selectSqlString = "SELECT DETAIL_ID,REPORT_NAME,ZIP_FILE_NAME "
+						+ "FROM GLT_RQ_DOWNLOADS WHERE DETAIL_ID in(" + detailIdStr + ")";
+				statement = xAppConnection.prepareStatement(selectSqlString);
+				rs = statement.executeQuery();
+				String docPathOnServer = XAppUtils.getFilePathForProp()
+						.getProperty(XAppConstants.USER_ACTIVITY_DOWNLOADED_FILES_PATH);
+				while (rs.next()) {
+					Integer detailId = rs.getInt(DETAIL_ID);
+					String reportName = rs.getString("REPORT_NAME");
+					String reportNameForZipFile = rs.getString("ZIP_FILE_NAME");
+					File f = null;
+					if (StringUtils.isNotBlank(reportName)) {
+						f = new File(docPathOnServer, reportName);
+						f.delete();
+					}
+
+					if (StringUtils.isNotBlank(reportNameForZipFile)) {
+						f = new File(docPathOnServer, reportNameForZipFile);
+						f.delete();
+					}
+
+					if (detailId != null) {
+						removeDownloadDetailEntryFromDB(detailId);
+					}
+				}
+
+			} catch (SQLSyntaxErrorException e) {
+				LOGGER.error("RDownloadsDAO :: deleteDownloads :: error ::", e);
+			} catch (SQLException e) {
+				LOGGER.error("RDownloadsDAO :: deleteDownloads :: error ::", e);
+			} catch (Exception e) {
+				LOGGER.error("RDownloadsDAO :: deleteDownloads :: error ::", e);
+			} finally {
+				XAppUtils.closeOpenCursors(xAppConnection, statement, rs);
+			}
+		} else {
+			LOGGER.debug("RDownloadsDAO :: deleteDownloads ::No records recieved at backend ::");
+		}
+	}
+
+	private static void removeDownloadDetailEntryFromDB(Integer detailId) {
+
+		XAppConnection xAppConnection = null;
+		PreparedStatement statement = null;
+		String selectSqlString = "";
+		try {
+			xAppConnection = XAppDBConnectionManager.getInstance().getConnection();
+			selectSqlString = "DELETE FROM GLT_RQ_DOWNLOADS WHERE DETAIL_ID =?";
+			statement = xAppConnection.prepareStatement(selectSqlString);
+			statement.setInt(1, detailId);
+			statement.executeUpdate();
+		} catch (Exception e) {
+			LOGGER.error("RDownloadsDAO :: removeDownloadDetailEntryFromDB :: error ::" + e.getStackTrace());
+		} finally {
+			XAppUtils.closeOpenCursors(xAppConnection, statement, null);
+		}
+
+	}
+
+	public static String compressAndGetTheFileNameToDownload(String detailIdStr) {
+
+		if (detailIdStr != null) {
+			XAppConnection xAppConnection = null;
+			PreparedStatement statement = null;
+			ResultSet rs = null;
+			String selectSqlString = "";
+			List<String> filenameList = new ArrayList<String>();
+
+			try {
+				xAppConnection = XAppDBConnectionManager.getInstance().getConnection();
+				selectSqlString = "SELECT DETAIL_ID,REPORT_NAME,ZIP_FILE_NAME "
+						+ "FROM GLT_RQ_DOWNLOADS WHERE DETAIL_ID in(" + detailIdStr + ") "
+						+ "AND ZIP_FILE_NAME IS NOT NULL AND ZIP_FILE_NAME LIKE '%.zip%'";
+				statement = xAppConnection.prepareStatement(selectSqlString);
+				rs = statement.executeQuery();
+				String docPathOnServer = XAppUtils.getFilePathForProp()
+						.getProperty(XAppConstants.USER_ACTIVITY_DOWNLOADED_FILES_PATH);
+				while (rs.next()) {
+					String reportNameForZipFile = rs.getString("ZIP_FILE_NAME");
+					if (StringUtils.isNotBlank(reportNameForZipFile)) {
+						filenameList.add(reportNameForZipFile);
+					}
+				}
+				String zipFileName = "UserActivity_" + System.currentTimeMillis() + XAppConstants.EXT_ZIP;
+				String destPath = docPathOnServer + XAppConstants.FWD_SLASH + zipFileName;
+				ZipUtils.createZipFolder(docPathOnServer, destPath, filenameList);
+				return destPath;
+
+			} catch (Exception e) {
+				LOGGER.error("RDownloadsDAO :: removeDownloadDetailEntryFromDB :: error ::" + e.getStackTrace());
+			} finally {
+				XAppUtils.closeOpenCursors(xAppConnection, statement, null);
+			}
+
+		} else {
+			LOGGER.debug("RDownloadsDAO :: deleteDownloads ::No records recieved at backend ::");
+		}
+		return null;
+	}
+
+	public static Integer addNewEntryForUserActivityDownloadedFile(Integer systemId, String reportNameInXLS,
+			Double fileSize, String status, Integer loggedInUserId, String zipFileName) {
+		LOGGER.debug("Method addNewEntryForUserActivityDownloadedFile starts");
+
+		XAppConnection xAppConnection = null;
+		PreparedStatement statement = null;
+		int nextSeq = -1;
+		String insertString = null;
+		try {
+			insertString = "INSERT INTO GLT_RQ_DOWNLOADS " + "(DETAIL_ID,RQ_SYSTEM_ID,REPORT_NAME,FILE_SIZE,STATUS"
+					+ ",CREATED_BY,CREATION_DATE_TIME,START_DATE_TIME,END_DATE_TIME,ZIP_FILE_NAME) "
+					+ "VALUES(?,?,?,?,?,?,?,?,?,?)";
+
+			xAppConnection = XAppDBConnectionManager.getInstance().getConnection();
+			nextSeq = GenericDbDao.getNextSequence("GLT_RQ_DOWNLOADS");
+			statement = xAppConnection.prepareStatement(insertString);
+			statement.setInt(1, nextSeq);
+			statement.setInt(2, systemId);
+			statement.setString(3, reportNameInXLS);
+			statement.setDouble(4, fileSize);
+			statement.setString(5, status);
+			statement.setInt(6, loggedInUserId);
+			java.util.Date date = new java.util.Date();
+			Object currentDateTime = new java.sql.Timestamp(date.getTime());
+			statement.setObject(7, currentDateTime);
+			statement.setObject(8, currentDateTime);
+			statement.setDate(9, null);
+			statement.setString(10, zipFileName);
+			statement.execute();
+		} catch (Exception e) {
+			LOGGER.debug("Error while inserting data in the GLT_RQ_DOWNLOADS table :", e);
+			return null;
+		} finally {
+			XAppUtils.closeOpenCursors(xAppConnection, statement, null);
+		}
+		return nextSeq;
+	}
+
+	public static void updateEntryForUserActivityDownloadedFile(Integer detailId, String status, Double fileSize,
+			Object endDateTime, String xlsFileName, String zipFileName) {
+		LOGGER.debug("Method addNewEntryForUserActivityDownloadedFile starts");
+
+		XAppConnection xAppConnection = null;
+		PreparedStatement statement = null;
+		try {
+			String updateString = "UPDATE GLT_RQ_DOWNLOADS SET STATUS=?,FILE_SIZE=?,END_DATE_TIME=?,ZIP_FILE_NAME=?,REPORT_NAME=? "
+					+ "WHERE DETAIL_ID=?";
+
+			xAppConnection = XAppDBConnectionManager.getInstance().getConnection();
+			statement = xAppConnection.prepareStatement(updateString);
+			statement.setString(1, status);
+			statement.setDouble(2, fileSize);
+			statement.setObject(3, endDateTime);
+			statement.setString(4, zipFileName);
+			statement.setString(5, xlsFileName);
+			statement.setInt(6, detailId);
+			statement.executeUpdate();
+		} catch (Exception e) {
+			LOGGER.debug("Error while updating details in the GLT_RQ_DOWNLOADS table :", e);
+		} finally {
+			XAppUtils.closeOpenCursors(xAppConnection, statement, null);
+		}
+	}
+
+	public static void updateEntryForRDownloadFilesFromInProgressToFailed() {
+		LOGGER.debug("Method updateEntryForRDownloadFilesFromInProgressToFailed starts");
+
+		XAppConnection xAppConnection = null;
+		PreparedStatement statement = null;
+		try {
+			String updateString = "UPDATE GLT_RQ_DOWNLOADS SET STATUS=? WHERE STATUS=?";
+
+			xAppConnection = XAppDBConnectionManager.getInstance().getConnection();
+			statement = xAppConnection.prepareStatement(updateString);
+			statement.setString(1, XAppConstants.FILE_GENERATION_FAILED);
+			statement.setString(2, XAppConstants.FILE_GENERATION_IN_PROGRESS);
+
+			statement.executeUpdate();
+		} catch (Exception e) {
+			LOGGER.debug("Error while updating details in the GLT_RQ_DOWNLOADS table :", e);
+		} finally {
+			XAppUtils.closeOpenCursors(xAppConnection, statement, null);
+		}
+	}
+
+	public static void writeDownTheRecordsInAFile(String absfilePath, String fileNameEntered, Integer detailId,
+			String zipFileName) {
+		Double fileSize;
+		LOGGER.debug("absfilePath:" + absfilePath);
+		if (!XAppUtils.isBlankOrNull(absfilePath)) {
+			String docPathOnServer = null;
+			try {
+				File file = new File(absfilePath);
+				String fileNamePathWithoutUnderscore = absfilePath.substring(0, absfilePath.lastIndexOf("_"));
+				File fileWithoutUnderscore = new File(fileNamePathWithoutUnderscore);
+				boolean renamed = file.renameTo(fileWithoutUnderscore);
+				LOGGER.debug("file renamed 1st Time:" + renamed);
+				docPathOnServer = XAppUtils.getFilePathForProp()
+						.getProperty(XAppConstants.USER_ACTIVITY_DOWNLOADED_FILES_PATH);
+				File xlsFileOnDecidedPath = new File(docPathOnServer, fileNameEntered);
+				renamed = fileWithoutUnderscore.renameTo(xlsFileOnDecidedPath);
+				if (!renamed) {
+					Thread.sleep(2000);
+					renamed = fileWithoutUnderscore.renameTo(xlsFileOnDecidedPath);
+				}
+
+				// TO COPY file1.txt from source to destination folder
+				LOGGER.debug("file renamed 2nd time:" + renamed);
+
+				zipFileName = fileNameEntered.substring(0, fileNameEntered.lastIndexOf(XAppConstants.DOT))
+						+ XAppConstants.EXT_ZIP;
+				List filenameList = new ArrayList();
+				filenameList.add(fileNameEntered);
+
+				String zipFileNamePath = docPathOnServer + XAppConstants.FWD_SLASH + zipFileName;
+				ZipUtils.createZipFolder(docPathOnServer, zipFileNamePath, filenameList);
+				LOGGER.debug("zip file created successfully::" + zipFileName);
+				fileSize = (double) new File(docPathOnServer, zipFileName).length() / 1024;
+				java.util.Date date = new java.util.Date();
+				Object endDateTimeObj = new java.sql.Timestamp(date.getTime());
+				// The JDBC driver knows what to do with a java.sql type:
+				RDownloadsDAO.updateEntryForUserActivityDownloadedFile(detailId,
+						XAppConstants.FILE_GENERATION_COMPLETED, fileSize, endDateTimeObj, fileNameEntered,
+						zipFileName);
+			} catch (Exception e) {
+				LOGGER.debug("Error while creation of zip file ", e);
+			}
+
+		}
+	}
+
+	public static Integer getUAShowLimit(Integer systemId) {
+		String systemParamValue = SystemDAO.getSystemParamValue(XAppConstants.ALLOW_DOWNLOAD_THROUGH_LEGACY_PROCESS,
+				systemId);
+
+		Integer uaShowLimit = null;
+		if (XAppConstants.Y.equalsIgnoreCase(systemParamValue)) {
+			uaShowLimit = XAppConstants.BATCH_UPDATE_SIZE;
+		} else {
+			try {
+				uaShowLimit = Integer.valueOf(SystemDAO.getSystemParamValue(XAppConstants.UA_SHOW_LIMIT, systemId));
+			} catch (NumberFormatException e) {
+				LOGGER.error("RDownloadsDAO :: getUADownloadLimit ::incorrect value recieved uaDownloadLimit ==="
+						+ uaShowLimit);
+				uaShowLimit = XAppConstants.BATCH_UPDATE_SIZE_50000;
+			}
+		}
+		return uaShowLimit;
+	}
+
+	public static Integer getUADownloadLimit(Integer systemId, boolean checkLegacyProcessFlag) {
+
+		Integer uaDownloadLimit = null;
+		if (checkLegacyProcessFlag && XAppConstants.Y.equalsIgnoreCase(
+				SystemDAO.getSystemParamValue(XAppConstants.ALLOW_DOWNLOAD_THROUGH_LEGACY_PROCESS, systemId))) {
+			uaDownloadLimit = XAppConstants.BATCH_UPDATE_SIZE;
+		} else {
+			try {
+				uaDownloadLimit = Integer
+						.valueOf(SystemDAO.getSystemParamValue(XAppConstants.UA_DOWNLOAD_LIMIT, systemId));
+			} catch (NumberFormatException e) {
+				LOGGER.error("RDownloadsDAO :: getUADownloadLimit ::incorrect value recieved uaDownloadLimit ==="
+						+ uaDownloadLimit);
+				uaDownloadLimit = XAppConstants.BATCH_UPDATE_SIZE_50000;
+			}
+		}
+		return uaDownloadLimit;
+	}
+
+}
+// end of class

Property changes on: source\com\greenlight\rqAdapter\dao\resqDAO\RDownloadsDAO.java
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: source/MessagesBundle_en.properties
===================================================================
--- source/MessagesBundle_en.properties	(revision 7417)
+++ source/MessagesBundle_en.properties	(revision 7418)
@@ -1862,6 +1862,7 @@
 RESQ.LEFTNAV.RESQ.EAM=Access Management
 RESQ.ACCESS.REQUEST.COMMENT.WORKFLOW.ATTACHED=Workflow Assigned
 RESQ.ACCESS.REQUEST.COMMENT.WORKFLOW.UPDATED=Workflow Updated
+RESQ.DOWNLOADS=Downloads
 
 
 #Workforce ProvisionEmergencyAccess and DeprovisionEmergencyAccess
@@ -2066,4 +2067,19 @@
 RESQ.FF.USER.ID=FF User Id
 FF.USER.NAME=FF User Name
 RESQ.OWNER.NAME=Owner Name
-RESQ.REVIEWER.NAME=Reviewer Name
\ No newline at end of file
+RESQ.REVIEWER.NAME=Reviewer Name
+
+USER.ACTIVITY.REPORT.NAME=Report Name
+
+DETAIL.ID=Detail Id
+REPORT.NAME=Report Name
+FILE.SIZE=File Size(KB)
+STATUS=Status
+CREATED.BY=Created By
+CREATION.DATE.TIME=Created On
+START.DATE.TIME = Start Date
+END.DATE.TIME=End Date
+
+RESQ.DOWNLOADS.RESPONSE.MSG=Report is schedule for generation.Please visit Downloads tab for details
+
+
