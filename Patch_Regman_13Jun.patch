Index: avmservice/src/main/java/com/greenlight/platform/avm/service/impl/ImportDataServiceImpl.java
===================================================================
--- avmservice/src/main/java/com/greenlight/platform/avm/service/impl/ImportDataServiceImpl.java	(revision 12889)
+++ avmservice/src/main/java/com/greenlight/platform/avm/service/impl/ImportDataServiceImpl.java	(working copy)
@@ -39,7 +39,7 @@
 	@PostConstruct
 	public void init() {
 		try {
-			this.updateInProcessImportStatusToFailed();
+		//	this.updateInProcessImportStatusToFailed();
 		} catch (final Exception e) {
 			this.logger.error(e);
 		}
Index: gldao/src/main/java/com/greenlight/platform/dao/repository/DynamicWorkflowConditionRepository.java
===================================================================
--- gldao/src/main/java/com/greenlight/platform/dao/repository/DynamicWorkflowConditionRepository.java	(revision 12889)
+++ gldao/src/main/java/com/greenlight/platform/dao/repository/DynamicWorkflowConditionRepository.java	(working copy)
@@ -1,17 +1,26 @@
 package com.greenlight.platform.dao.repository;
 
+import java.util.Date;
+import java.util.List;
+
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+
 import com.greenlight.platform.model.domain.DynamicWorkflowCondition;
-import com.greenlight.platform.model.domain.DynamicWorkflowConditionFilter;
-import com.greenlight.platform.model.domain.DynamicWorkflowConfiguration;
-import com.greenlight.platform.model.domain.DynamicWorkflowStage;
-import com.greenlight.platform.model.domain.DynamicWorkflowStagePath;
-import com.greenlight.platform.model.domain.DynamicWorkflowStageTransition;
 
 public interface DynamicWorkflowConditionRepository extends SoftDeleteRepository<DynamicWorkflowCondition> {
 
-/*	DynamicWorkflowCondition findByConfiguration(DynamicWorkflowConfiguration configuration);
-	DynamicWorkflowCondition findByStage(DynamicWorkflowStage stage);
-	DynamicWorkflowCondition findByConditionFilter(DynamicWorkflowConditionFilter conditionFilter);
-	DynamicWorkflowCondition findByKey(String key);*/
+	/*
+	 * DynamicWorkflowCondition findByConfiguration(DynamicWorkflowConfiguration
+	 * configuration); DynamicWorkflowCondition findByStage(DynamicWorkflowStage
+	 * stage); DynamicWorkflowCondition
+	 * findByConditionFilter(DynamicWorkflowConditionFilter conditionFilter);
+	 * DynamicWorkflowCondition findByKey(String key);
+	 */
 
+	@Query("from DynamicWorkflowCondition dwcon join DynamicWorkflowConfiguration dwconf on "
+			+ "dwcon.configuration = dwconf.id where dwconf.effectiveDate <= :currentDate and dwconf.status =:status")
+	List<DynamicWorkflowCondition> findAllPastActiveDynamicWorkflowConditions(@Param("currentDate") Date currentDate,
+			@Param("status") String status);
+
 }
Index: gldao/src/main/java/com/greenlight/platform/dao/repository/DynamicWorkflowConfigurationRepository.java
===================================================================
--- gldao/src/main/java/com/greenlight/platform/dao/repository/DynamicWorkflowConfigurationRepository.java	(revision 12889)
+++ gldao/src/main/java/com/greenlight/platform/dao/repository/DynamicWorkflowConfigurationRepository.java	(working copy)
@@ -6,6 +6,6 @@
 
 import com.greenlight.platform.model.domain.DynamicWorkflowConfiguration;
 
-public interface DynamicWorkflowConfigurationRepository extends JpaRepository<DynamicWorkflowConfiguration, Serializable> {
-	
+public interface DynamicWorkflowConfigurationRepository
+		extends JpaRepository<DynamicWorkflowConfiguration, Serializable> {
 }
Index: gldao/src/main/java/com/greenlight/platform/dao/repository/RequestAccessRiskAnalysisRepository.java
===================================================================
--- gldao/src/main/java/com/greenlight/platform/dao/repository/RequestAccessRiskAnalysisRepository.java	(revision 12889)
+++ gldao/src/main/java/com/greenlight/platform/dao/repository/RequestAccessRiskAnalysisRepository.java	(working copy)
@@ -20,7 +20,9 @@
 
 	List<RequestAccessRiskAnalysis> findAllByUserName(@Param("userName") String userName);
 
-	//@Query(" delete from EmailList where userName=:userName")
+	// @Query(" delete from EmailList where userName=:userName")
 	void deleteAllByUserName(@Param("userName") String userName);
 
+	@Query("count(1) from RequestAccessRiskAnalysis r where r.requestId=:requestId")
+	Long findCountByRequestId(@Param("requestId") Long requestId);
 }
Index: gldao/src/main/java/com/greenlight/platform/model/domain/RequestAccessAccount.java
===================================================================
--- gldao/src/main/java/com/greenlight/platform/model/domain/RequestAccessAccount.java	(revision 12889)
+++ gldao/src/main/java/com/greenlight/platform/model/domain/RequestAccessAccount.java	(working copy)
@@ -166,6 +166,8 @@
 	@Column(name = "IS_PROVISION")
 	private String isProvision;
 
+	@Column(name = "WORKFLOW_PROCESS_KEY" , length=100)
+	private String processKey;
 
 	@Override
 	public String getName() {
Index: gldao/src/main/java/com/greenlight/platform/model/domain/RequestAccessCatalog.java
===================================================================
--- gldao/src/main/java/com/greenlight/platform/model/domain/RequestAccessCatalog.java	(revision 12889)
+++ gldao/src/main/java/com/greenlight/platform/model/domain/RequestAccessCatalog.java	(working copy)
@@ -158,6 +158,9 @@
 	
 	@Column(name = "IS_PROVISION", length = 1)
 	private String isProvision;
+	
+	@Column(name = "WORKFLOW_PROCESS_KEY" , length=100)
+	private String processKey;
 
 	@Override
 	public String getName() {
Index: glworkflow/src/main/java/com/greenlight/platform/workflow/constants/DynamicWorkFlowConfigurationEnum.java
===================================================================
--- glworkflow/src/main/java/com/greenlight/platform/workflow/constants/DynamicWorkFlowConfigurationEnum.java	(nonexistent)
+++ glworkflow/src/main/java/com/greenlight/platform/workflow/constants/DynamicWorkFlowConfigurationEnum.java	(working copy)
@@ -0,0 +1,20 @@
+package com.greenlight.platform.workflow.constants;
+
+public enum DynamicWorkFlowConfigurationEnum {
+
+	ASSET("ASSET"), EQUALS_OPR("eq"), NOT_EQUALS_OPR("neq"), REQUEST_TYPE("REQUESTTYPE"), BUSINESS_ROLE(
+			"BUSINESSROLE"), BUSINESS_PROCESS("BP"), SUB_BUSINESS_PROCESS("SBP"), USER(
+					"USER"), REQUEST_CRTITCALITY("CRITICALITY"), REQUEST_CREATED_BY(
+							"REQUESTCREATEDBY"), ACTIVE("Active"), ACTION("ACTION"), RISK_COUNT("RISKCOUNT");
+
+	private final String value;
+
+	public String getValue() {
+		return value;
+	}
+
+	private DynamicWorkFlowConfigurationEnum(String value) {
+		this.value = value;
+	}
+
+}
Index: glworkflow/src/main/java/com/greenlight/platform/workflow/service/DynamicWorkflowService.java
===================================================================
--- glworkflow/src/main/java/com/greenlight/platform/workflow/service/DynamicWorkflowService.java	(revision 12889)
+++ glworkflow/src/main/java/com/greenlight/platform/workflow/service/DynamicWorkflowService.java	(working copy)
@@ -2,6 +2,8 @@
 
 import java.util.List;
 
+import com.greenlight.platform.model.WorkflowType;
+import com.greenlight.platform.model.domain.DynamicWorkflowConfiguration;
 import com.greenlight.platform.workflow.dto.WfDetailVO;
 import com.greenlight.platform.workflow.dto.WfStageAndTransitionDetail;
 
@@ -10,4 +12,9 @@
 	List<WfDetailVO> getWorkflowsWithStageCount();
 
 	WfStageAndTransitionDetail getWfStageAndTransitionDetailsByProcessId(String processId);
+
+	DynamicWorkflowConfiguration getDynamicWorkFlowConfigurationAfterQualifyingConfiguration(Long requestId,
+			WorkflowType workFlowType);
+
+	Object getRequestAccessChildObjBasedOnWorkFlowType(Long requestId, WorkflowType workFlowType);
 }
\ No newline at end of file
Index: glworkflow/src/main/java/com/greenlight/platform/workflow/service/impl/DynamicWorkflowServiceImpl.java
===================================================================
--- glworkflow/src/main/java/com/greenlight/platform/workflow/service/impl/DynamicWorkflowServiceImpl.java	(revision 12889)
+++ glworkflow/src/main/java/com/greenlight/platform/workflow/service/impl/DynamicWorkflowServiceImpl.java	(working copy)
@@ -3,10 +3,12 @@
 
 import java.util.ArrayList;
 import java.util.Comparator;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
+import java.util.Set;
 
 import org.activiti.bpmn.model.BpmnModel;
 import org.activiti.bpmn.model.EndEvent;
@@ -25,10 +27,25 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
+import com.greenlight.platform.dao.repository.DynamicWorkflowConditionRepository;
+import com.greenlight.platform.dao.repository.RequestAccessAccountRepository;
+import com.greenlight.platform.dao.repository.RequestAccessCatalogRepository;
+import com.greenlight.platform.dao.repository.RequestAccessRiskAnalysisRepository;
 import com.greenlight.platform.dao.repository.WorkflowSetupRepository;
 import com.greenlight.platform.dto.WorkflowInformation;
 import com.greenlight.platform.dto.WorkflowStageWithProperties;
+import com.greenlight.platform.logger.Log;
+import com.greenlight.platform.logger.Logger;
 import com.greenlight.platform.model.WorkflowSetup;
+import com.greenlight.platform.model.WorkflowType;
+import com.greenlight.platform.model.domain.BusinessRoleEntitlement;
+import com.greenlight.platform.model.domain.DynamicWorkflowCondition;
+import com.greenlight.platform.model.domain.DynamicWorkflowConfiguration;
+import com.greenlight.platform.model.domain.RequestAccess;
+import com.greenlight.platform.model.domain.RequestAccessAccount;
+import com.greenlight.platform.model.domain.RequestAccessCatalog;
+import com.greenlight.platform.model.domain.UserAccount;
+import com.greenlight.platform.workflow.constants.DynamicWorkFlowConfigurationEnum;
 import com.greenlight.platform.workflow.dto.WfDetailVO;
 import com.greenlight.platform.workflow.dto.WfStageAndTransitionDetail;
 import com.greenlight.platform.workflow.dto.WfStageInformation;
@@ -44,6 +61,21 @@
 	@Autowired
 	private ProcessEngine processEngine;
 
+	@Autowired
+	private RequestAccessAccountRepository requestAccessAccountRepository;
+
+	@Autowired
+	private RequestAccessCatalogRepository requestAccessCatalogRepository;
+
+	@Autowired
+	private DynamicWorkflowConditionRepository dynamicWorkflowConditionRepository;
+
+	@Autowired
+	private RequestAccessRiskAnalysisRepository requestAccessRiskAnalysisRepository;
+
+	@Log
+	private Logger logger;
+
 	@Override
 	public List<WfDetailVO> getWorkflowsWithStageCount() {
 		List<WfDetailVO> response = new ArrayList<>();
@@ -262,4 +294,302 @@
 		}
 		return response;
 	}
-}
+
+	@Override
+	public Object getRequestAccessChildObjBasedOnWorkFlowType(final Long requestId, final WorkflowType workFlowType) {
+		try {
+			if (WorkflowType.UAM_REQUEST_ACCESS_ACCOUNT.equals(workFlowType)) {
+				Optional<RequestAccessAccount> opAcnt = requestAccessAccountRepository.findById(requestId);
+				return opAcnt.isPresent() ? opAcnt.get() : null;
+			} else if (WorkflowType.UAM_REQUEST_ACCESS_CATALOG.equals(workFlowType)) {
+				Optional<RequestAccessCatalog> opCat = requestAccessCatalogRepository.findById(requestId);
+				return opCat.isPresent() ? opCat.get() : null;
+			}
+		} catch (Exception e) {
+			logger.error("Exception while fetching requestAccessChildObjBasedOnWorkFlowType", e);
+		}
+		return null;
+	}
+
+	@Override
+	public DynamicWorkflowConfiguration getDynamicWorkFlowConfigurationAfterQualifyingConfiguration(
+			final Long requestId, final WorkflowType workFlowType) {
+		Object requestAccessChildObjBasedOnWorkFlowType = getRequestAccessChildObjBasedOnWorkFlowType(requestId,
+				workFlowType);
+		Map<String, Object> confValuesToValidate = new HashMap<>();
+		List<DynamicWorkflowCondition> dynamicWorkflowConditions = dynamicWorkflowConditionRepository
+				.findAllPastActiveDynamicWorkflowConditions(new Date(),
+						DynamicWorkFlowConfigurationEnum.ACTIVE.getValue());
+
+		if (requestAccessChildObjBasedOnWorkFlowType != null) {
+			if (WorkflowType.UAM_REQUEST_ACCESS_ACCOUNT.equals(workFlowType)) {
+				RequestAccessAccount requestAccessAccount = (RequestAccessAccount) requestAccessChildObjBasedOnWorkFlowType;
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.ASSET.getValue(),
+						getAssetForRequestAccount(requestAccessAccount));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.REQUEST_TYPE.getValue(),
+						getRequestTypeCodeFromRequestAccount(requestAccessAccount));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.USER.getValue(),
+						getRequestedForFromRequestAccount(requestAccessAccount));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.REQUEST_CRTITCALITY.getValue(),
+						getRequestCriticalityFromRequestAccount(requestAccessAccount));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.RISK_COUNT.getValue(),
+						getSodCountFromRequestAccess(requestAccessAccount.getRequestAccess()));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.ACTION.getValue(),
+						requestAccessAccount.getAction());
+
+			} else if (WorkflowType.UAM_REQUEST_ACCESS_CATALOG.equals(workFlowType)) {
+				RequestAccessCatalog requestAccessCatalog = (RequestAccessCatalog) requestAccessChildObjBasedOnWorkFlowType;
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.ASSET.getValue(),
+						getAssetForRequestCatalog(requestAccessCatalog));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.REQUEST_TYPE.getValue(),
+						getRequestTypeCodeFromRequestCatalog(requestAccessCatalog));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.USER.getValue(),
+						getRequestedForFromRequestCatalog(requestAccessCatalog));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.REQUEST_CRTITCALITY.getValue(),
+						getRequestCriticalityFromRequestCatalog(requestAccessCatalog));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.BUSINESS_ROLE.getValue(),
+						getBusinessRoleFromRequestCatalog(requestAccessCatalog));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.BUSINESS_PROCESS.getValue(),
+						getBusinessProcessFromRequestCatalog(requestAccessCatalog));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.SUB_BUSINESS_PROCESS.getValue(),
+						getSubBusinessProcessFromRequestCatalog(requestAccessCatalog));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.RISK_COUNT.getValue(),
+						getSodCountFromRequestAccess(requestAccessCatalog.getRequestAccess()));
+				confValuesToValidate.put(DynamicWorkFlowConfigurationEnum.ACTION.getValue(),
+						requestAccessCatalog.getAction());
+
+			}
+
+			return getResponseByValidatingConfiguration(dynamicWorkflowConditions, confValuesToValidate, workFlowType);
+
+		}
+		return null;
+	}
+
+	private List<String> getAssetForRequestAccount(RequestAccessAccount requestAccessAccount) {
+		List<String> response = new ArrayList<>();
+		UserAccount userAccount = requestAccessAccount.getUserAccount();
+		if (userAccount != null) {
+			if (userAccount.getAsset() != null) {
+				response.add(userAccount.getAsset().getName());
+			}
+		} else if (requestAccessAccount.getAsset() != null) {
+			response.add(requestAccessAccount.getAsset().getName());
+		}
+		return response;
+	}
+
+	private DynamicWorkflowConfiguration getResponseByValidatingConfiguration(
+			List<DynamicWorkflowCondition> dynamicWorkflowConditions, Map<String, Object> confValuesToValidate,
+			final WorkflowType workFlowType) {
+
+		DynamicWorkflowConfiguration response = new DynamicWorkflowConfiguration();
+		if (dynamicWorkflowConditions != null) {
+			for (DynamicWorkflowCondition dynamicWorkflowCondition : dynamicWorkflowConditions) {
+				boolean matched = true;
+				matched = genericValidationForListStrValues(DynamicWorkFlowConfigurationEnum.ASSET.getValue(),
+						confValuesToValidate.get(DynamicWorkFlowConfigurationEnum.ASSET.getValue()), matched,
+						dynamicWorkflowCondition);
+				matched = matched
+						&& genericValidationForStrValue(DynamicWorkFlowConfigurationEnum.REQUEST_TYPE.getValue(),
+								confValuesToValidate.get(DynamicWorkFlowConfigurationEnum.REQUEST_TYPE.getValue()),
+								matched, dynamicWorkflowCondition);
+				matched = matched && genericValidationForStrValue(DynamicWorkFlowConfigurationEnum.USER.getValue(),
+						confValuesToValidate.get(DynamicWorkFlowConfigurationEnum.USER.getValue()), matched,
+						dynamicWorkflowCondition);
+				matched = matched
+						&& genericValidationForStrValue(DynamicWorkFlowConfigurationEnum.REQUEST_CRTITCALITY.getValue(),
+								confValuesToValidate
+										.get(DynamicWorkFlowConfigurationEnum.REQUEST_CRTITCALITY.getValue()),
+								matched, dynamicWorkflowCondition);
+				matched = matched && genericValidationForStrValue(DynamicWorkFlowConfigurationEnum.ACTION.getValue(),
+						confValuesToValidate.get(DynamicWorkFlowConfigurationEnum.ACTION.getValue()), matched,
+						dynamicWorkflowCondition);
+
+				matched = matched
+						&& genericValidationForNumericValue(DynamicWorkFlowConfigurationEnum.RISK_COUNT.getValue(),
+								confValuesToValidate.get(DynamicWorkFlowConfigurationEnum.RISK_COUNT.getValue()),
+								matched, dynamicWorkflowCondition);
+
+				if (WorkflowType.UAM_REQUEST_ACCESS_CATALOG.equals(workFlowType)) {
+					matched = matched
+							&& genericValidationForStrValue(DynamicWorkFlowConfigurationEnum.BUSINESS_ROLE.getValue(),
+									confValuesToValidate.get(DynamicWorkFlowConfigurationEnum.BUSINESS_ROLE.getValue()),
+									matched, dynamicWorkflowCondition);
+					matched = matched && genericValidationForStrValue(
+							DynamicWorkFlowConfigurationEnum.BUSINESS_PROCESS.getValue(),
+							confValuesToValidate.get(DynamicWorkFlowConfigurationEnum.BUSINESS_PROCESS.getValue()),
+							matched, dynamicWorkflowCondition);
+					matched = matched && genericValidationForStrValue(
+							DynamicWorkFlowConfigurationEnum.SUB_BUSINESS_PROCESS.getValue(),
+							confValuesToValidate.get(DynamicWorkFlowConfigurationEnum.SUB_BUSINESS_PROCESS.getValue()),
+							matched, dynamicWorkflowCondition);
+				}
+
+				if (matched) {
+					response = dynamicWorkflowCondition.getConfiguration();
+					break;
+				}
+			}
+		}
+		return response;
+
+	}
+
+	private List<String> getAssetForRequestCatalog(RequestAccessCatalog requestAccessCatalog) {
+		List<String> response = new ArrayList<>();
+		if (requestAccessCatalog != null && requestAccessCatalog.getBusinessRole() != null
+				&& requestAccessCatalog.getBusinessRole().getBusinessRoleEntitlement() != null) {
+			Set<BusinessRoleEntitlement> businessRoleEntitlements = requestAccessCatalog.getBusinessRole()
+					.getBusinessRoleEntitlement();
+			for (BusinessRoleEntitlement businessRoleEntitlement : businessRoleEntitlements) {
+				if (businessRoleEntitlement != null && businessRoleEntitlement.getEntitlement() != null
+						&& businessRoleEntitlement.getEntitlement().getAsset() != null) {
+					response.add(businessRoleEntitlement.getEntitlement().getAsset().getName());
+				}
+			}
+		}
+		return response;
+	}
+
+	private String getBusinessRoleFromRequestCatalog(RequestAccessCatalog requestAccessCatalog) {
+		return (requestAccessCatalog != null && requestAccessCatalog.getBusinessRole() != null)
+				? requestAccessCatalog.getBusinessRole().getName()
+				: null;
+	}
+
+	private String getBusinessProcessFromRequestCatalog(RequestAccessCatalog requestAccessCatalog) {
+		return (requestAccessCatalog != null && requestAccessCatalog.getBusinessRole() != null
+				&& requestAccessCatalog.getBusinessRole().getBusinessProcess() != null)
+						? requestAccessCatalog.getBusinessRole().getBusinessProcess().getName()
+						: null;
+	}
+
+	private String getSubBusinessProcessFromRequestCatalog(RequestAccessCatalog requestAccessCatalog) {
+		return (requestAccessCatalog != null && requestAccessCatalog.getBusinessRole() != null
+				&& requestAccessCatalog.getBusinessRole().getBusinessSubProcess() != null)
+						? requestAccessCatalog.getBusinessRole().getBusinessSubProcess().getName()
+						: null;
+	}
+
+	private String getRequestCriticalityFromRequestAccount(RequestAccessAccount requestAccessAccount) {
+		return (requestAccessAccount != null && requestAccessAccount.getRequestAccess() != null
+				&& requestAccessAccount.getRequestAccess().getPriority() != null)
+						? requestAccessAccount.getRequestAccess().getPriority().getName()
+						: null;
+	}
+
+	private String getRequestCriticalityFromRequestCatalog(RequestAccessCatalog requestAccessCatalog) {
+		return (requestAccessCatalog != null && requestAccessCatalog.getRequestAccess() != null
+				&& requestAccessCatalog.getRequestAccess().getPriority() != null)
+						? requestAccessCatalog.getRequestAccess().getPriority().getName()
+						: null;
+	}
+
+	private Long getSodCountFromRequestAccess(RequestAccess requestAccess) {
+		return (requestAccess != null ? requestAccessRiskAnalysisRepository.findCountByRequestId(requestAccess.getId())
+				: null);
+	}
+
+	private String getRequestTypeCodeFromRequestAccount(RequestAccessAccount requestAccessAccount) {
+		return (requestAccessAccount != null && requestAccessAccount.getRequestType() != null)
+				? requestAccessAccount.getRequestType().getCode()
+				: null;
+	}
+
+	private String getRequestTypeCodeFromRequestCatalog(RequestAccessCatalog requestAccessCatalog) {
+		return (requestAccessCatalog != null && requestAccessCatalog.getRequestType() != null)
+				? requestAccessCatalog.getRequestType().getCode()
+				: null;
+	}
+
+	private String getRequestedForFromRequestAccount(RequestAccessAccount requestAccessAccount) {
+		return (requestAccessAccount != null && requestAccessAccount.getRequestedFor() != null)
+				? requestAccessAccount.getRequestedFor().getName()
+				: null;
+	}
+
+	private String getRequestedForFromRequestCatalog(RequestAccessCatalog requestAccessCatalog) {
+		return (requestAccessCatalog != null && requestAccessCatalog.getRequestedFor() != null)
+				? requestAccessCatalog.getRequestedFor().getName()
+				: null;
+	}
+
+	private boolean genericValidationForListStrValues(String keyToCompare, Object request, boolean matched,
+			DynamicWorkflowCondition dynamicWorkflowCondition) {
+		List<String> requestList = (List<String>) request;
+		if (matched && keyToCompare.equalsIgnoreCase(dynamicWorkflowCondition.getKey())) {
+			if (StringUtils.isNotBlank(dynamicWorkflowCondition.getVal())) {
+				if (DynamicWorkFlowConfigurationEnum.EQUALS_OPR.getValue()
+						.equalsIgnoreCase(dynamicWorkflowCondition.getOpr())) {
+					matched = (requestList.contains(dynamicWorkflowCondition.getVal()));
+				} else if (DynamicWorkFlowConfigurationEnum.NOT_EQUALS_OPR.getValue()
+						.equalsIgnoreCase(dynamicWorkflowCondition.getOpr())) {
+					matched = !requestList.contains(dynamicWorkflowCondition.getVal());
+				} else {
+					matched = false;
+				}
+			} else {
+				// Basically we won't validate if value from dynamicWorkflowCondition.getVal()
+				// is empty
+				matched = true;
+			}
+		} else {
+			matched = false;
+		}
+		return matched;
+	}
+
+	private boolean genericValidationForStrValue(String keyToCompare, Object requestObj, boolean matched,
+			DynamicWorkflowCondition dynamicWorkflowCondition) {
+		String valueToBeCompared = (String) requestObj;
+		if (matched && keyToCompare.equalsIgnoreCase(dynamicWorkflowCondition.getKey())) {
+			if (StringUtils.isNotBlank(dynamicWorkflowCondition.getVal())) {
+				if (DynamicWorkFlowConfigurationEnum.EQUALS_OPR.getValue()
+						.equalsIgnoreCase(dynamicWorkflowCondition.getOpr())) {
+					matched = (valueToBeCompared.equalsIgnoreCase(dynamicWorkflowCondition.getVal()));
+				} else if (DynamicWorkFlowConfigurationEnum.NOT_EQUALS_OPR.getValue()
+						.equalsIgnoreCase(dynamicWorkflowCondition.getOpr())) {
+					matched = !valueToBeCompared.equalsIgnoreCase(dynamicWorkflowCondition.getVal());
+				} else {
+					matched = false;
+				}
+			} else {
+				// Basically we won't validate if value from dynamicWorkflowCondition.getVal()
+				// is empty
+				matched = true;
+			}
+			return matched;
+		} else {
+			matched = false;
+		}
+		return matched;
+	}
+
+	private boolean genericValidationForNumericValue(String keyToCompare, Object requestObj, boolean matched,
+			DynamicWorkflowCondition dynamicWorkflowCondition) {
+		Long valueToBeCompared = (Long) requestObj;
+		if (matched && keyToCompare.equalsIgnoreCase(dynamicWorkflowCondition.getKey())) {
+			if (StringUtils.isNotBlank(dynamicWorkflowCondition.getVal())) {
+				if (DynamicWorkFlowConfigurationEnum.EQUALS_OPR.getValue()
+						.equalsIgnoreCase(dynamicWorkflowCondition.getOpr())) {
+					matched = (valueToBeCompared.compareTo(Long.valueOf(dynamicWorkflowCondition.getVal())) == 0);
+				} else if (DynamicWorkFlowConfigurationEnum.NOT_EQUALS_OPR.getValue()
+						.equalsIgnoreCase(dynamicWorkflowCondition.getOpr())) {
+					matched = (valueToBeCompared.compareTo(Long.valueOf(dynamicWorkflowCondition.getVal())) != 0);
+				} else {
+					matched = false;
+				}
+			} else {
+				// Basically we won't validate if value from dynamicWorkflowCondition.getVal()
+				// is empty
+				matched = true;
+			}
+			return matched;
+		} else {
+			matched = false;
+		}
+		return matched;
+	}
+
+}
\ No newline at end of file
